Input output examples:
    i 16 j 16 sizei 8 sizej 8    _out -1
    i 16 j 16 sizei 8 sizej 16    _out -1
    i 16 j 16 sizei 8 sizej 32    _out -1
    i 16 j 16 sizei 16 sizej 8    _out -1
    i 16 j 16 sizei 16 sizej 16    _out 10
    i 16 j 16 sizei 16 sizej 32    _out 7
    i 16 j 16 sizei 32 sizej 8    _out -1
    i 16 j 16 sizei 32 sizej 16    _out 10
    i 16 j 16 sizei 32 sizej 32    _out 106
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x9984a0
i 16 j 16 sizei 8 sizej 8 _out -1
i 16 j 16 sizei 8 sizej 16 _out -1
i 16 j 16 sizei 8 sizej 32 _out -1
i 16 j 16 sizei 16 sizej 8 _out -1
i 16 j 16 sizei 16 sizej 16 _out 10
i 16 j 16 sizei 16 sizej 32 _out 7
i 16 j 16 sizei 32 sizej 8 _out -1
i 16 j 16 sizei 32 sizej 16 _out 10
i 16 j 16 sizei 32 sizej 32 _out 106
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 144, check correct
Current pList size 144, grow
Current pList size 21024, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 5 right size 4
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 16, check correct
Current pList size 16, grow
Current pList size 171, eliminate equvalents
Current pList size 65, check correct
Current pList size 65, grow
Current pList size 2313, eliminate equvalents
Current pList size 245, check correct
SynProg: ((! (sizei < i) ) && (! (sizej < i) ))
SynProg: ((! (sizei < i) ) && (! (sizej < i) ))
Complete, program found ((! (sizei < i) ) && (! (sizej < i) ))

Start search node 0x997eb0
i 16 j 16 sizei 8 sizej 8 _out -1
i 16 j 16 sizei 8 sizej 16 _out -1
i 16 j 16 sizei 8 sizej 32 _out -1
i 16 j 16 sizei 16 sizej 8 _out -1
i 16 j 16 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0x998270
i 16 j 16 sizei 16 sizej 16 _out 10
i 16 j 16 sizei 16 sizej 32 _out 7
i 16 j 16 sizei 32 sizej 16 _out 10
i 16 j 16 sizei 32 sizej 32 _out 106
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 144, check correct
Current pList size 144, grow
Current pList size 21024, eliminate equvalents
Time out for bottem up search
Current node size 4 Split to two: left size 3 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 14, check correct
Current pList size 14, grow
Current pList size 156, eliminate equvalents
Current pList size 46, check correct
SynProg: ((i < sizei) && (i < sizej))
SynProg: ((i < sizei) && (i < sizej))
Complete, program found ((i < sizei) && (i < sizej))

Start search node 0x993f60
i 16 j 16 sizei 16 sizej 16 _out 10
i 16 j 16 sizei 16 sizej 32 _out 7
i 16 j 16 sizei 32 sizej 16 _out 10
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 144, check correct
Current pList size 144, grow
Current pList size 21024, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 1 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 12, check correct
SynProg: (i < sizej)
SynProg: (i < sizej)
Complete, program found (i < sizej)

Start search node 0x998450
i 16 j 16 sizei 16 sizej 32 _out 7
Searched Program: 
Init pList size 17, check correct
SynProg: 7
SynProg: 7
Complete, program found 7

Start search node 0x998360
i 16 j 16 sizei 16 sizej 16 _out 10
i 16 j 16 sizei 32 sizej 16 _out 10
Searched Program: 
Init pList size 17, check correct
SynProg: 10
SynProg: 10
Complete, program found 10

Start search node 0x993ba0
i 16 j 16 sizei 32 sizej 32 _out 106
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
Current pList size 99, grow
Current pList size 9999, eliminate equvalents
Current pList size 2045, check correct
SynProg: (i + (9 * 10))
SynProg: (i + (9 * 10))
Complete, program found (i + (9 * 10))
--------------------------------------, dump tree after search
i 16 j 16 sizei 8 sizej 8 _out 1
i 16 j 16 sizei 8 sizej 16 _out 1
i 16 j 16 sizei 8 sizej 32 _out 1
i 16 j 16 sizei 16 sizej 8 _out 1
i 16 j 16 sizei 16 sizej 16 _out 0
i 16 j 16 sizei 16 sizej 32 _out 0
i 16 j 16 sizei 32 sizej 8 _out 1
i 16 j 16 sizei 32 sizej 16 _out 0
i 16 j 16 sizei 32 sizej 32 _out 0
Searched Program: (if ((! (sizei < i) ) && (! (sizej < i) )) then -1 else (if ((i < sizei) && (i < sizej)) then (if (i < sizej) then 7 else 10) else (i + (9 * 10))))
L---i 16 j 16 sizei 8 sizej 8 _out -1
L---i 16 j 16 sizei 8 sizej 16 _out -1
L---i 16 j 16 sizei 8 sizej 32 _out -1
L---i 16 j 16 sizei 16 sizej 8 _out -1
L---i 16 j 16 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 16 j 16 sizei 16 sizej 16 _out 1
R---i 16 j 16 sizei 16 sizej 32 _out 1
R---i 16 j 16 sizei 32 sizej 16 _out 1
R---i 16 j 16 sizei 32 sizej 32 _out 0
Searched Program: (if ((i < sizei) && (i < sizej)) then (if (i < sizej) then 7 else 10) else (i + (9 * 10)))
R---L---i 16 j 16 sizei 16 sizej 16 _out 0
R---L---i 16 j 16 sizei 16 sizej 32 _out 1
R---L---i 16 j 16 sizei 32 sizej 16 _out 0
Searched Program: (if (i < sizej) then 7 else 10)
R---L---L---i 16 j 16 sizei 16 sizej 32 _out 7
Searched Program: 7
R---L---R---i 16 j 16 sizei 16 sizej 16 _out 10
R---L---R---i 16 j 16 sizei 32 sizej 16 _out 10
Searched Program: 10
R---R---i 16 j 16 sizei 32 sizej 32 _out 106
Searched Program: (i + (9 * 10))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if ((! (sizei < i) ) && (! (sizej < i) )) then -1 else (if ((i < sizei) && (i < sizej)) then (if (i < sizej) then 7 else 10) else (i + (9 * 10))))
--------------------------------------
