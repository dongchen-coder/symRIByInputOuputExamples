Input output examples:
    i 2 j 11 sizei 8 sizej 8    _out -1
    i 2 j 11 sizei 8 sizej 16    _out 55
    i 2 j 11 sizei 8 sizej 32    _out 55
    i 2 j 11 sizei 16 sizej 8    _out -1
    i 2 j 11 sizei 16 sizej 16    _out 85
    i 2 j 11 sizei 16 sizej 32    _out 78
    i 2 j 11 sizei 32 sizej 8    _out -1
    i 2 j 11 sizei 32 sizej 16    _out 85
    i 2 j 11 sizei 32 sizej 32    _out 181
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0xad24a0
i 2 j 11 sizei 8 sizej 8 _out -1
i 2 j 11 sizei 8 sizej 16 _out 55
i 2 j 11 sizei 8 sizej 32 _out 55
i 2 j 11 sizei 16 sizej 8 _out -1
i 2 j 11 sizei 16 sizej 16 _out 85
i 2 j 11 sizei 16 sizej 32 _out 78
i 2 j 11 sizei 32 sizej 8 _out -1
i 2 j 11 sizei 32 sizej 16 _out 85
i 2 j 11 sizei 32 sizej 32 _out 181
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 3 right size 6
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 22, check correct
SynProg: (j < sizej)
SynProg: (j < sizej)
Complete, program found (j < sizej)

Start search node 0xad23b0
i 2 j 11 sizei 8 sizej 8 _out -1
i 2 j 11 sizei 16 sizej 8 _out -1
i 2 j 11 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0xad3900
i 2 j 11 sizei 8 sizej 16 _out 55
i 2 j 11 sizei 8 sizej 32 _out 55
i 2 j 11 sizei 16 sizej 16 _out 85
i 2 j 11 sizei 16 sizej 32 _out 78
i 2 j 11 sizei 32 sizej 16 _out 85
i 2 j 11 sizei 32 sizej 32 _out 181
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Time out for bottem up search
Current node size 6 Split to two: left size 3 right size 3
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 20, check correct
SynProg: (sizei < sizej)
SynProg: (sizei < sizej)
Complete, program found (sizei < sizej)

Start search node 0xacd6a0
i 2 j 11 sizei 8 sizej 16 _out 55
i 2 j 11 sizei 8 sizej 32 _out 55
i 2 j 11 sizei 16 sizej 32 _out 78
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 2 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 18, check correct
SynProg: (j < sizei)
SynProg: (j < sizei)
Complete, program found (j < sizei)

Start search node 0xacf060
i 2 j 11 sizei 8 sizej 16 _out 55
i 2 j 11 sizei 8 sizej 32 _out 55
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 103, check correct
SynProg: (j * 5)
SynProg: (j * 5)
Complete, program found (j * 5)

Start search node 0xacdb00
i 2 j 11 sizei 16 sizej 32 _out 78
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
Current pList size 99, grow
Current pList size 9999, eliminate equvalents
Current pList size 2045, check correct
SynProg: (1 + (j * 7))
SynProg: (1 + (j * 7))
Complete, program found (1 + (j * 7))

Start search node 0xacd830
i 2 j 11 sizei 16 sizej 16 _out 85
i 2 j 11 sizei 32 sizej 16 _out 85
i 2 j 11 sizei 32 sizej 32 _out 181
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 2 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 17, check correct
Current pList size 17, grow
Current pList size 325, eliminate equvalents
Current pList size 77, check correct
SynProg: (sizej < (j + j))
SynProg: (sizej < (j + j))
Complete, program found (sizej < (j + j))

Start search node 0xacd9c0
i 2 j 11 sizei 16 sizej 16 _out 85
i 2 j 11 sizei 32 sizej 16 _out 85
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 113, check correct
Current pList size 113, grow
Current pList size 12995, eliminate equvalents
Time out for bottem up search
Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 17, check correct
Current pList size 17, grow
Current pList size 325, eliminate equvalents
Current pList size 72, check correct
Current pList size 72, grow
Current pList size 7053, eliminate equvalents
Current pList size 395, check correct
SynProg: (((i + i) + (j + j)) + ((j + sizej) + (sizej + sizej)))
SynProg: (((i + i) + (j + j)) + ((j + sizej) + (sizej + sizej)))
Complete, program found (((i + i) + (j + j)) + ((j + sizej) + (sizej + sizej)))

Start search node 0xacdf60
i 2 j 11 sizei 16 sizej 16 _out 85
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 84, check correct
Current pList size 84, grow
Current pList size 7224, eliminate equvalents
Current pList size 1275, check correct
SynProg: (1 + (7 * 12))
SynProg: (1 + (7 * 12))
Complete, program found (1 + (7 * 12))

Start search node 0xad4b00
i 2 j 11 sizei 32 sizej 16 _out 85
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
Current pList size 99, grow
Current pList size 9999, eliminate equvalents
Current pList size 2045, check correct
SynProg: (1 + (7 * 12))
SynProg: (1 + (7 * 12))
Complete, program found (1 + (7 * 12))

Start search node 0xad1780
i 2 j 11 sizei 32 sizej 32 _out 181
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
Current pList size 94, grow
Current pList size 9024, eliminate equvalents
Current pList size 1935, check correct
SynProg: ((j + 10) + (sizei * 5))
SynProg: ((j + 10) + (sizei * 5))
Complete, program found ((j + 10) + (sizei * 5))
--------------------------------------, dump tree after search
i 2 j 11 sizei 8 sizej 8 _out 1
i 2 j 11 sizei 8 sizej 16 _out 0
i 2 j 11 sizei 8 sizej 32 _out 0
i 2 j 11 sizei 16 sizej 8 _out 1
i 2 j 11 sizei 16 sizej 16 _out 0
i 2 j 11 sizei 16 sizej 32 _out 0
i 2 j 11 sizei 32 sizej 8 _out 1
i 2 j 11 sizei 32 sizej 16 _out 0
i 2 j 11 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizej) then -1 else (if (sizei < sizej) then (if (j < sizei) then (j * 5) else (1 + (j * 7))) else (if (sizej < (j + j)) then (if (((i + i) + (j + j)) + ((j + sizej) + (sizej + sizej))) then (1 + (7 * 12)) else (1 + (7 * 12))) else ((j + 10) + (sizei * 5)))))
L---i 2 j 11 sizei 8 sizej 8 _out -1
L---i 2 j 11 sizei 16 sizej 8 _out -1
L---i 2 j 11 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 2 j 11 sizei 8 sizej 16 _out 1
R---i 2 j 11 sizei 8 sizej 32 _out 1
R---i 2 j 11 sizei 16 sizej 16 _out 0
R---i 2 j 11 sizei 16 sizej 32 _out 1
R---i 2 j 11 sizei 32 sizej 16 _out 0
R---i 2 j 11 sizei 32 sizej 32 _out 0
Searched Program: (if (sizei < sizej) then (if (j < sizei) then (j * 5) else (1 + (j * 7))) else (if (sizej < (j + j)) then (if (((i + i) + (j + j)) + ((j + sizej) + (sizej + sizej))) then (1 + (7 * 12)) else (1 + (7 * 12))) else ((j + 10) + (sizei * 5))))
R---L---i 2 j 11 sizei 8 sizej 16 _out 1
R---L---i 2 j 11 sizei 8 sizej 32 _out 1
R---L---i 2 j 11 sizei 16 sizej 32 _out 0
Searched Program: (if (j < sizei) then (j * 5) else (1 + (j * 7)))
R---L---L---i 2 j 11 sizei 8 sizej 16 _out 55
R---L---L---i 2 j 11 sizei 8 sizej 32 _out 55
Searched Program: (j * 5)
R---L---R---i 2 j 11 sizei 16 sizej 32 _out 78
Searched Program: (1 + (j * 7))
R---R---i 2 j 11 sizei 16 sizej 16 _out 1
R---R---i 2 j 11 sizei 32 sizej 16 _out 1
R---R---i 2 j 11 sizei 32 sizej 32 _out 0
Searched Program: (if (sizej < (j + j)) then (if (((i + i) + (j + j)) + ((j + sizej) + (sizej + sizej))) then (1 + (7 * 12)) else (1 + (7 * 12))) else ((j + 10) + (sizei * 5)))
R---R---L---i 2 j 11 sizei 16 sizej 16 _out 85
R---R---L---i 2 j 11 sizei 32 sizej 16 _out 85
Searched Program: (if (((i + i) + (j + j)) + ((j + sizej) + (sizej + sizej))) then (1 + (7 * 12)) else (1 + (7 * 12)))
R---R---L---L---i 2 j 11 sizei 16 sizej 16 _out 85
Searched Program: (1 + (7 * 12))
R---R---L---R---i 2 j 11 sizei 32 sizej 16 _out 85
Searched Program: (1 + (7 * 12))
R---R---R---i 2 j 11 sizei 32 sizej 32 _out 181
Searched Program: ((j + 10) + (sizei * 5))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (j < sizej) then -1 else (if (sizei < sizej) then (if (j < sizei) then (j * 5) else (1 + (j * 7))) else (if (sizej < (j + j)) then (if (((i + i) + (j + j)) + ((j + sizej) + (sizej + sizej))) then (1 + (7 * 12)) else (1 + (7 * 12))) else ((j + 10) + (sizei * 5)))))
--------------------------------------
