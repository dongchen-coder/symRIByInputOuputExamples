Input output examples:
    i 9 j 18 sizei 8 sizej 8    _out -1
    i 9 j 18 sizei 8 sizej 16    _out -1
    i 9 j 18 sizei 8 sizej 32    _out -1
    i 9 j 18 sizei 16 sizej 8    _out -1
    i 9 j 18 sizei 16 sizej 16    _out -1
    i 9 j 18 sizei 16 sizej 32    _out 135
    i 9 j 18 sizei 32 sizej 8    _out -1
    i 9 j 18 sizei 32 sizej 16    _out -1
    i 9 j 18 sizei 32 sizej 32    _out 135
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x26134a0
i 9 j 18 sizei 8 sizej 8 _out -1
i 9 j 18 sizei 8 sizej 16 _out -1
i 9 j 18 sizei 8 sizej 32 _out -1
i 9 j 18 sizei 16 sizej 8 _out -1
i 9 j 18 sizei 16 sizej 16 _out -1
i 9 j 18 sizei 16 sizej 32 _out 135
i 9 j 18 sizei 32 sizej 8 _out -1
i 9 j 18 sizei 32 sizej 16 _out -1
i 9 j 18 sizei 32 sizej 32 _out 135
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 145, check correct
Current pList size 145, grow
Current pList size 21315, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 7 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 25, check correct
Current pList size 25, grow
Current pList size 364, eliminate equvalents
Current pList size 106, check correct
SynProg: ((i < sizei) && (j < sizej))
SynProg: ((i < sizei) && (j < sizej))
Complete, program found ((i < sizei) && (j < sizej))

Start search node 0x26129b0
i 9 j 18 sizei 8 sizej 8 _out -1
i 9 j 18 sizei 8 sizej 16 _out -1
i 9 j 18 sizei 8 sizej 32 _out -1
i 9 j 18 sizei 16 sizej 8 _out -1
i 9 j 18 sizei 16 sizej 16 _out -1
i 9 j 18 sizei 32 sizej 8 _out -1
i 9 j 18 sizei 32 sizej 16 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0x2612cd0
i 9 j 18 sizei 16 sizej 32 _out 135
i 9 j 18 sizei 32 sizej 32 _out 135
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 135, check correct
Current pList size 135, grow
Current pList size 18495, eliminate equvalents
Time out for bottem up search
Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 17, check correct
Current pList size 17, grow
Current pList size 288, eliminate equvalents
Current pList size 58, check correct
Current pList size 58, grow
Current pList size 4470, eliminate equvalents
Current pList size 288, check correct
SynProg: (((i + j) + (j + j)) + ((j + j) + (j + j)))
SynProg: (((i + j) + (j + j)) + ((j + j) + (j + j)))
Complete, program found (((i + j) + (j + j)) + ((j + j) + (j + j)))

Start search node 0x260ec90
i 9 j 18 sizei 16 sizej 32 _out 135
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 108, check correct
Current pList size 108, grow
Current pList size 11880, eliminate equvalents
Current pList size 2348, check correct
SynProg: (i + (j * 7))
SynProg: (i + (j * 7))
Complete, program found (i + (j * 7))

Start search node 0x260eab0
i 9 j 18 sizei 32 sizej 32 _out 135
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 104, check correct
Current pList size 104, grow
Current pList size 11024, eliminate equvalents
Current pList size 2267, check correct
SynProg: (i + (j * 7))
SynProg: (i + (j * 7))
Complete, program found (i + (j * 7))
--------------------------------------, dump tree after search
i 9 j 18 sizei 8 sizej 8 _out 1
i 9 j 18 sizei 8 sizej 16 _out 1
i 9 j 18 sizei 8 sizej 32 _out 1
i 9 j 18 sizei 16 sizej 8 _out 1
i 9 j 18 sizei 16 sizej 16 _out 1
i 9 j 18 sizei 16 sizej 32 _out 0
i 9 j 18 sizei 32 sizej 8 _out 1
i 9 j 18 sizei 32 sizej 16 _out 1
i 9 j 18 sizei 32 sizej 32 _out 0
Searched Program: (if ((i < sizei) && (j < sizej)) then -1 else (if (((i + j) + (j + j)) + ((j + j) + (j + j))) then (i + (j * 7)) else (i + (j * 7))))
L---i 9 j 18 sizei 8 sizej 8 _out -1
L---i 9 j 18 sizei 8 sizej 16 _out -1
L---i 9 j 18 sizei 8 sizej 32 _out -1
L---i 9 j 18 sizei 16 sizej 8 _out -1
L---i 9 j 18 sizei 16 sizej 16 _out -1
L---i 9 j 18 sizei 32 sizej 8 _out -1
L---i 9 j 18 sizei 32 sizej 16 _out -1
Searched Program: -1
R---i 9 j 18 sizei 16 sizej 32 _out 135
R---i 9 j 18 sizei 32 sizej 32 _out 135
Searched Program: (if (((i + j) + (j + j)) + ((j + j) + (j + j))) then (i + (j * 7)) else (i + (j * 7)))
R---L---i 9 j 18 sizei 16 sizej 32 _out 135
Searched Program: (i + (j * 7))
R---R---i 9 j 18 sizei 32 sizej 32 _out 135
Searched Program: (i + (j * 7))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if ((i < sizei) && (j < sizej)) then -1 else (if (((i + j) + (j + j)) + ((j + j) + (j + j))) then (i + (j * 7)) else (i + (j * 7))))
--------------------------------------
