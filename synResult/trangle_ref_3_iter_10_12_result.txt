Input output examples:
    i 10 j 12 sizei 8 sizej 8    _out -1
    i 10 j 12 sizei 8 sizej 16    _out -1
    i 10 j 12 sizei 8 sizej 32    _out -1
    i 10 j 12 sizei 16 sizej 8    _out -1
    i 10 j 12 sizei 16 sizej 16    _out 37
    i 10 j 12 sizei 16 sizej 32    _out 30
    i 10 j 12 sizei 32 sizej 8    _out -1
    i 10 j 12 sizei 32 sizej 16    _out 37
    i 10 j 12 sizei 32 sizej 32    _out 133
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 2 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0xe824a0
i 10 j 12 sizei 8 sizej 8 _out -1
i 10 j 12 sizei 8 sizej 16 _out -1
i 10 j 12 sizei 8 sizej 32 _out -1
i 10 j 12 sizei 16 sizej 8 _out -1
i 10 j 12 sizei 16 sizej 16 _out 37
i 10 j 12 sizei 16 sizej 32 _out 30
i 10 j 12 sizei 32 sizej 8 _out -1
i 10 j 12 sizei 32 sizej 16 _out 37
i 10 j 12 sizei 32 sizej 32 _out 133
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
Current pList size 7864, grow
Time out for bottem up search
Failed, try to split node: Current node size 9 Split to two: left size 5 right size 4
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 27, check correct
Current pList size 27, grow
Current pList size 615, eliminate equvalents
Current pList size 136, check correct
SynProg: ((i < sizei) && (i < sizej))
SynProg: ((i < sizei) && (i < sizej))
Start search condition, Complete, program found ((i < sizei) && (i < sizej))
succeed

Start search node 0xe81eb0
i 10 j 12 sizei 8 sizej 8 _out -1
i 10 j 12 sizei 8 sizej 16 _out -1
i 10 j 12 sizei 8 sizej 32 _out -1
i 10 j 12 sizei 16 sizej 8 _out -1
i 10 j 12 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0xe82270
i 10 j 12 sizei 16 sizej 16 _out 37
i 10 j 12 sizei 16 sizej 32 _out 30
i 10 j 12 sizei 32 sizej 16 _out 37
i 10 j 12 sizei 32 sizej 32 _out 133
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
Current pList size 7864, grow
Time out for bottem up search
Failed, try to split node: Current node size 4 Split to two: left size 3 right size 1
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 23, check correct
Current pList size 23, grow
Current pList size 585, eliminate equvalents
Current pList size 114, check correct
Current pList size 114, grow
Current pList size 16446, eliminate equvalents
Current pList size 708, check correct
SynProg: ((! (sizei < sizej) ) && ((i + i) < sizej))
SynProg: ((! (sizei < sizej) ) && ((i + i) < sizej))
Start search condition, Complete, program found ((! (sizei < sizej) ) && ((i + i) < sizej))
succeed

Start search node 0xe7df60
i 10 j 12 sizei 16 sizej 16 _out 37
i 10 j 12 sizei 16 sizej 32 _out 30
i 10 j 12 sizei 32 sizej 16 _out 37
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
Current pList size 7864, grow
Time out for bottem up search
Failed, try to split node: Current node size 3 Split to two: left size 1 right size 2
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 23, check correct
SynProg: (sizei < sizej)
SynProg: (sizei < sizej)
Start search condition, Complete, program found (sizei < sizej)
succeed

Start search node 0xe82450
i 10 j 12 sizei 16 sizej 32 _out 30
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
SynProg: (i * 3)
SynProg: (i * 3)
Complete, program found (i * 3)

Start search node 0xe82360
i 10 j 12 sizei 16 sizej 16 _out 37
i 10 j 12 sizei 32 sizej 16 _out 37
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 113, check correct
Current pList size 113, grow
Current pList size 12995, eliminate equvalents
Current pList size 4431, check correct
SynProg: (i + (sizej + 11))
SynProg: (i + (sizej + 11))
Complete, program found (i + (sizej + 11))

Start search node 0xe7dba0
i 10 j 12 sizei 32 sizej 32 _out 133
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
Current pList size 94, grow
Current pList size 9024, eliminate equvalents
Current pList size 1935, check correct
SynProg: (j + (11 * 11))
SynProg: (j + (11 * 11))
Complete, program found (j + (11 * 11))
--------------------------------------, dump tree after search
i 10 j 12 sizei 8 sizej 8 _out 1
i 10 j 12 sizei 8 sizej 16 _out 1
i 10 j 12 sizei 8 sizej 32 _out 1
i 10 j 12 sizei 16 sizej 8 _out 1
i 10 j 12 sizei 16 sizej 16 _out 0
i 10 j 12 sizei 16 sizej 32 _out 0
i 10 j 12 sizei 32 sizej 8 _out 1
i 10 j 12 sizei 32 sizej 16 _out 0
i 10 j 12 sizei 32 sizej 32 _out 0
Searched Program: (if ((i < sizei) && (i < sizej)) then -1 else (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then (if (sizei < sizej) then (i * 3) else (i + (sizej + 11))) else (j + (11 * 11))))
L---i 10 j 12 sizei 8 sizej 8 _out -1
L---i 10 j 12 sizei 8 sizej 16 _out -1
L---i 10 j 12 sizei 8 sizej 32 _out -1
L---i 10 j 12 sizei 16 sizej 8 _out -1
L---i 10 j 12 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 10 j 12 sizei 16 sizej 16 _out 1
R---i 10 j 12 sizei 16 sizej 32 _out 1
R---i 10 j 12 sizei 32 sizej 16 _out 1
R---i 10 j 12 sizei 32 sizej 32 _out 0
Searched Program: (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then (if (sizei < sizej) then (i * 3) else (i + (sizej + 11))) else (j + (11 * 11)))
R---L---i 10 j 12 sizei 16 sizej 16 _out 0
R---L---i 10 j 12 sizei 16 sizej 32 _out 1
R---L---i 10 j 12 sizei 32 sizej 16 _out 0
Searched Program: (if (sizei < sizej) then (i * 3) else (i + (sizej + 11)))
R---L---L---i 10 j 12 sizei 16 sizej 32 _out 30
Searched Program: (i * 3)
R---L---R---i 10 j 12 sizei 16 sizej 16 _out 37
R---L---R---i 10 j 12 sizei 32 sizej 16 _out 37
Searched Program: (i + (sizej + 11))
R---R---i 10 j 12 sizei 32 sizej 32 _out 133
Searched Program: (j + (11 * 11))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if ((i < sizei) && (i < sizej)) then -1 else (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then (if (sizei < sizej) then (i * 3) else (i + (sizej + 11))) else (j + (11 * 11))))
--------------------------------------
