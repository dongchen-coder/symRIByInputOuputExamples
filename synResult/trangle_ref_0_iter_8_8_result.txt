Input output examples:
    i 8 j 8 sizei 8 sizej 8    _out 2
    i 8 j 8 sizei 8 sizej 16    _out 50
    i 8 j 8 sizei 8 sizej 32    _out 27
    i 8 j 8 sizei 16 sizej 8    _out 2
    i 8 j 8 sizei 16 sizej 16    _out 50
    i 8 j 8 sizei 16 sizej 32    _out 34
    i 8 j 8 sizei 32 sizej 8    _out 2
    i 8 j 8 sizei 32 sizej 16    _out 50
    i 8 j 8 sizei 32 sizej 32    _out 146
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x12c84a0
i 8 j 8 sizei 8 sizej 8 _out 2
i 8 j 8 sizei 8 sizej 16 _out 50
i 8 j 8 sizei 8 sizej 32 _out 27
i 8 j 8 sizei 16 sizej 8 _out 2
i 8 j 8 sizei 16 sizej 16 _out 50
i 8 j 8 sizei 16 sizej 32 _out 34
i 8 j 8 sizei 32 sizej 8 _out 2
i 8 j 8 sizei 32 sizej 16 _out 50
i 8 j 8 sizei 32 sizej 32 _out 146
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
Current pList size 7864, grow
Time out for bottem up search
Current node size 9 Split to two: left size 4 right size 5
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 14, check correct
Current pList size 14, grow
Current pList size 156, eliminate equvalents
Current pList size 56, check correct
Current pList size 56, grow
Current pList size 2061, eliminate equvalents
Current pList size 218, check correct
Current pList size 218, grow
Current pList size 42130, eliminate equvalents
Current pList size 1147, check correct
SynProg: ((i < sizej) && (! ((sizei + sizei) < sizej) ))
SynProg: ((i < sizej) && (! ((sizei + sizei) < sizej) ))
Complete, program found ((i < sizej) && (! ((sizei + sizei) < sizej) ))

Start search node 0x12c7fa0
i 8 j 8 sizei 8 sizej 8 _out 2
i 8 j 8 sizei 8 sizej 32 _out 27
i 8 j 8 sizei 16 sizej 8 _out 2
i 8 j 8 sizei 32 sizej 8 _out 2
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7862, check correct
Current pList size 7862, grow
Time out for bottem up search
Current node size 4 Split to two: left size 3 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 12, check correct
SynProg: (i < sizej)
SynProg: (i < sizej)
Complete, program found (i < sizej)

Start search node 0x12c3a60
i 8 j 8 sizei 8 sizej 8 _out 2
i 8 j 8 sizei 16 sizej 8 _out 2
i 8 j 8 sizei 32 sizej 8 _out 2
Searched Program: 
Init pList size 17, check correct
SynProg: 2
SynProg: 2
Complete, program found 2

Start search node 0x12c3330
i 8 j 8 sizei 8 sizej 32 _out 27
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
SynProg: (3 * 9)
SynProg: (3 * 9)
Complete, program found (3 * 9)

Start search node 0x12c97f0
i 8 j 8 sizei 8 sizej 16 _out 50
i 8 j 8 sizei 16 sizej 16 _out 50
i 8 j 8 sizei 16 sizej 32 _out 34
i 8 j 8 sizei 32 sizej 16 _out 50
i 8 j 8 sizei 32 sizej 32 _out 146
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
Current pList size 7864, grow
Time out for bottem up search
Current node size 5 Split to two: left size 4 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 14, check correct
Current pList size 14, grow
Current pList size 156, eliminate equvalents
Current pList size 45, check correct
Current pList size 45, grow
Current pList size 1863, eliminate equvalents
Current pList size 184, check correct
SynProg: ((! (sizei < sizej) ) && ((i + i) < sizej))
SynProg: ((! (sizei < sizej) ) && ((i + i) < sizej))
Complete, program found ((! (sizei < sizej) ) && ((i + i) < sizej))

Start search node 0x12c7960
i 8 j 8 sizei 8 sizej 16 _out 50
i 8 j 8 sizei 16 sizej 16 _out 50
i 8 j 8 sizei 16 sizej 32 _out 34
i 8 j 8 sizei 32 sizej 16 _out 50
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
SynProg: ((sizej * -1) + (6 * 11))
SynProg: ((sizej * -1) + (6 * 11))
Complete, program found ((sizej * -1) + (6 * 11))

Start search node 0x12c50b0
i 8 j 8 sizei 32 sizej 32 _out 146
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
Current pList size 94, grow
Current pList size 9024, eliminate equvalents
Current pList size 1935, check correct
SynProg: (2 + (12 * 12))
SynProg: (2 + (12 * 12))
Complete, program found (2 + (12 * 12))
--------------------------------------, dump tree after search
i 8 j 8 sizei 8 sizej 8 _out 1
i 8 j 8 sizei 8 sizej 16 _out 0
i 8 j 8 sizei 8 sizej 32 _out 1
i 8 j 8 sizei 16 sizej 8 _out 1
i 8 j 8 sizei 16 sizej 16 _out 0
i 8 j 8 sizei 16 sizej 32 _out 0
i 8 j 8 sizei 32 sizej 8 _out 1
i 8 j 8 sizei 32 sizej 16 _out 0
i 8 j 8 sizei 32 sizej 32 _out 0
Searched Program: (if ((i < sizej) && (! ((sizei + sizei) < sizej) )) then (if (i < sizej) then 2 else (3 * 9)) else (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then ((sizej * -1) + (6 * 11)) else (2 + (12 * 12))))
L---i 8 j 8 sizei 8 sizej 8 _out 1
L---i 8 j 8 sizei 8 sizej 32 _out 0
L---i 8 j 8 sizei 16 sizej 8 _out 1
L---i 8 j 8 sizei 32 sizej 8 _out 1
Searched Program: (if (i < sizej) then 2 else (3 * 9))
L---L---i 8 j 8 sizei 8 sizej 8 _out 2
L---L---i 8 j 8 sizei 16 sizej 8 _out 2
L---L---i 8 j 8 sizei 32 sizej 8 _out 2
Searched Program: 2
L---R---i 8 j 8 sizei 8 sizej 32 _out 27
Searched Program: (3 * 9)
R---i 8 j 8 sizei 8 sizej 16 _out 1
R---i 8 j 8 sizei 16 sizej 16 _out 1
R---i 8 j 8 sizei 16 sizej 32 _out 1
R---i 8 j 8 sizei 32 sizej 16 _out 1
R---i 8 j 8 sizei 32 sizej 32 _out 0
Searched Program: (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then ((sizej * -1) + (6 * 11)) else (2 + (12 * 12)))
R---L---i 8 j 8 sizei 8 sizej 16 _out 50
R---L---i 8 j 8 sizei 16 sizej 16 _out 50
R---L---i 8 j 8 sizei 16 sizej 32 _out 34
R---L---i 8 j 8 sizei 32 sizej 16 _out 50
Searched Program: ((sizej * -1) + (6 * 11))
R---R---i 8 j 8 sizei 32 sizej 32 _out 146
Searched Program: (2 + (12 * 12))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if ((i < sizej) && (! ((sizei + sizei) < sizej) )) then (if (i < sizej) then 2 else (3 * 9)) else (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then ((sizej * -1) + (6 * 11)) else (2 + (12 * 12))))
--------------------------------------
