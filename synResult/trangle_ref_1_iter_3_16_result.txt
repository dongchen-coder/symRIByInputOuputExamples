Input output examples:
    i 3 j 16 sizei 8 sizej 8    _out -1
    i 3 j 16 sizei 8 sizej 16    _out 51
    i 3 j 16 sizei 8 sizej 32    _out 51
    i 3 j 16 sizei 16 sizej 8    _out -1
    i 3 j 16 sizei 16 sizej 16    _out 0
    i 3 j 16 sizei 16 sizej 32    _out 171
    i 3 j 16 sizei 32 sizej 8    _out -1
    i 3 j 16 sizei 32 sizej 16    _out 0
    i 3 j 16 sizei 32 sizej 32    _out 171
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x1bcb4a0
i 3 j 16 sizei 8 sizej 8 _out -1
i 3 j 16 sizei 8 sizej 16 _out 51
i 3 j 16 sizei 8 sizej 32 _out 51
i 3 j 16 sizei 16 sizej 8 _out -1
i 3 j 16 sizei 16 sizej 16 _out 0
i 3 j 16 sizei 16 sizej 32 _out 171
i 3 j 16 sizei 32 sizej 8 _out -1
i 3 j 16 sizei 32 sizej 16 _out 0
i 3 j 16 sizei 32 sizej 32 _out 171
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 144, check correct
Current pList size 144, grow
Current pList size 21024, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 3 right size 6
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 22, check correct
SynProg: (sizej < j)
SynProg: (sizej < j)
Complete, program found (sizej < j)

Start search node 0x1bcb3b0
i 3 j 16 sizei 8 sizej 8 _out -1
i 3 j 16 sizei 16 sizej 8 _out -1
i 3 j 16 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0x1bcc900
i 3 j 16 sizei 8 sizej 16 _out 51
i 3 j 16 sizei 8 sizej 32 _out 51
i 3 j 16 sizei 16 sizej 16 _out 0
i 3 j 16 sizei 16 sizej 32 _out 171
i 3 j 16 sizei 32 sizej 16 _out 0
i 3 j 16 sizei 32 sizej 32 _out 171
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 144, check correct
Current pList size 144, grow
Current pList size 21024, eliminate equvalents
Time out for bottem up search
Current node size 6 Split to two: left size 4 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 21, check correct
Current pList size 21, grow
Current pList size 351, eliminate equvalents
Current pList size 88, check correct
Current pList size 88, grow
Current pList size 7455, eliminate equvalents
Current pList size 528, check correct
SynProg: ((j < sizej) && (! (sizei < j) ))
SynProg: ((j < sizej) && (! (sizei < j) ))
Complete, program found ((j < sizej) && (! (sizei < j) ))

Start search node 0x1bc6420
i 3 j 16 sizei 8 sizej 16 _out 51
i 3 j 16 sizei 8 sizej 32 _out 51
i 3 j 16 sizei 16 sizej 16 _out 0
i 3 j 16 sizei 32 sizej 16 _out 0
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 144, check correct
Current pList size 144, grow
Current pList size 21024, eliminate equvalents
Time out for bottem up search
Current node size 4 Split to two: left size 2 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 19, check correct
SynProg: (sizei < j)
SynProg: (sizei < j)
Complete, program found (sizei < j)

Start search node 0x1bcaf00
i 3 j 16 sizei 16 sizej 16 _out 0
i 3 j 16 sizei 32 sizej 16 _out 0
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 113, check correct
SynProg: (1 + -1)
SynProg: (1 + -1)
Complete, program found (1 + -1)

Start search node 0x1bc6ce0
i 3 j 16 sizei 8 sizej 16 _out 51
i 3 j 16 sizei 8 sizej 32 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 113, check correct
Current pList size 113, grow
Current pList size 12995, eliminate equvalents
Time out for bottem up search
Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 16, check correct
Current pList size 16, grow
Current pList size 283, eliminate equvalents
Current pList size 58, check correct
SynProg: ((i + j) + (j + j))
SynProg: ((i + j) + (j + j))
Complete, program found ((i + j) + (j + j))

Start search node 0x1bc6510
i 3 j 16 sizei 8 sizej 16 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 84, check correct
Current pList size 84, grow
Current pList size 7224, eliminate equvalents
Current pList size 1275, check correct
SynProg: (i + (i * j))
SynProg: (i + (i * j))
Complete, program found (i + (i * j))

Start search node 0x1bc6b00
i 3 j 16 sizei 8 sizej 32 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
Current pList size 99, grow
Current pList size 9999, eliminate equvalents
Current pList size 2045, check correct
SynProg: (i + (j + sizej))
SynProg: (i + (j + sizej))
Complete, program found (i + (j + sizej))

Start search node 0x1bc68d0
i 3 j 16 sizei 16 sizej 32 _out 171
i 3 j 16 sizei 32 sizej 32 _out 171
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 130, check correct
Current pList size 130, grow
Current pList size 17160, eliminate equvalents
Time out for bottem up search
Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 17, check correct
Current pList size 17, grow
Current pList size 288, eliminate equvalents
Current pList size 58, check correct
Current pList size 58, grow
Current pList size 4470, eliminate equvalents
Current pList size 288, check correct
Current pList size 288, grow
Current pList size 121425, eliminate equvalents
Time out for bottem up search
Search fcase failed
Search fcase failed
--------------------------------------, dump tree after search
i 3 j 16 sizei 8 sizej 8 _out 1
i 3 j 16 sizei 8 sizej 16 _out 0
i 3 j 16 sizei 8 sizej 32 _out 0
i 3 j 16 sizei 16 sizej 8 _out 1
i 3 j 16 sizei 16 sizej 16 _out 0
i 3 j 16 sizei 16 sizej 32 _out 0
i 3 j 16 sizei 32 sizej 8 _out 1
i 3 j 16 sizei 32 sizej 16 _out 0
i 3 j 16 sizei 32 sizej 32 _out 0
Searched Program: 
L---i 3 j 16 sizei 8 sizej 8 _out -1
L---i 3 j 16 sizei 16 sizej 8 _out -1
L---i 3 j 16 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 3 j 16 sizei 8 sizej 16 _out 1
R---i 3 j 16 sizei 8 sizej 32 _out 1
R---i 3 j 16 sizei 16 sizej 16 _out 1
R---i 3 j 16 sizei 16 sizej 32 _out 0
R---i 3 j 16 sizei 32 sizej 16 _out 1
R---i 3 j 16 sizei 32 sizej 32 _out 0
Searched Program: 
R---L---i 3 j 16 sizei 8 sizej 16 _out 0
R---L---i 3 j 16 sizei 8 sizej 32 _out 0
R---L---i 3 j 16 sizei 16 sizej 16 _out 1
R---L---i 3 j 16 sizei 32 sizej 16 _out 1
Searched Program: (if (sizei < j) then (1 + -1) else (if ((i + j) + (j + j)) then (i + (i * j)) else (i + (j + sizej))))
R---L---L---i 3 j 16 sizei 16 sizej 16 _out 0
R---L---L---i 3 j 16 sizei 32 sizej 16 _out 0
Searched Program: (1 + -1)
R---L---R---i 3 j 16 sizei 8 sizej 16 _out 51
R---L---R---i 3 j 16 sizei 8 sizej 32 _out 51
Searched Program: (if ((i + j) + (j + j)) then (i + (i * j)) else (i + (j + sizej)))
R---L---R---L---i 3 j 16 sizei 8 sizej 16 _out 51
Searched Program: (i + (i * j))
R---L---R---R---i 3 j 16 sizei 8 sizej 32 _out 51
Searched Program: (i + (j + sizej))
R---R---i 3 j 16 sizei 16 sizej 32 _out 171
R---R---i 3 j 16 sizei 32 sizej 32 _out 171
Searched Program: 
R---R---L---i 3 j 16 sizei 16 sizej 32 _out 171
Searched Program: 
R---R---R---i 3 j 16 sizei 32 sizej 32 _out 171
Searched Program: 
--------------------------------------
--------------------------------------, dump search result start
Not yet founded, (T^T)
--------------------------------------
