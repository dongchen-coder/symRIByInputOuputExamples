Input output examples:
    i 5 j 20 sizei 8 sizej 8    _out -1
    i 5 j 20 sizei 8 sizej 16    _out -1
    i 5 j 20 sizei 8 sizej 32    _out 51
    i 5 j 20 sizei 16 sizej 8    _out -1
    i 5 j 20 sizei 16 sizej 16    _out -1
    i 5 j 20 sizei 16 sizej 32    _out 159
    i 5 j 20 sizei 32 sizej 8    _out -1
    i 5 j 20 sizei 32 sizej 16    _out -1
    i 5 j 20 sizei 32 sizej 32    _out 159
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 2 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x1f9a4a0
i 5 j 20 sizei 8 sizej 8 _out -1
i 5 j 20 sizei 8 sizej 16 _out -1
i 5 j 20 sizei 8 sizej 32 _out 51
i 5 j 20 sizei 16 sizej 8 _out -1
i 5 j 20 sizei 16 sizej 16 _out -1
i 5 j 20 sizei 16 sizej 32 _out 159
i 5 j 20 sizei 32 sizej 8 _out -1
i 5 j 20 sizei 32 sizej 16 _out -1
i 5 j 20 sizei 32 sizej 32 _out 159
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 147, check correct
Current pList size 147, grow
Current pList size 21903, eliminate equvalents
Time out for bottem up search
Failed, try to split node: Current node size 9 Split to two: left size 6 right size 3
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 28, check correct
SynProg: (j < sizej)
SynProg: (j < sizej)
Start search condition, Complete, program found (j < sizej)
succeed

Start search node 0x1f99dc0
i 5 j 20 sizei 8 sizej 8 _out -1
i 5 j 20 sizei 8 sizej 16 _out -1
i 5 j 20 sizei 16 sizej 8 _out -1
i 5 j 20 sizei 16 sizej 16 _out -1
i 5 j 20 sizei 32 sizej 8 _out -1
i 5 j 20 sizei 32 sizej 16 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0x1f9a090
i 5 j 20 sizei 8 sizej 32 _out 51
i 5 j 20 sizei 16 sizej 32 _out 159
i 5 j 20 sizei 32 sizej 32 _out 159
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 136, check correct
Current pList size 136, grow
Current pList size 18768, eliminate equvalents
Current pList size 6661, check correct
Current pList size 6661, grow
Time out for bottem up search
Failed, try to split node: Current node size 3 Split to two: left size 1 right size 2
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 24, check correct
Current pList size 24, grow
Current pList size 645, eliminate equvalents
Current pList size 123, check correct
SynProg: (j < (i + sizei))
SynProg: (j < (i + sizei))
Start search condition, Complete, program found (j < (i + sizei))
succeed

Start search node 0x1f95790
i 5 j 20 sizei 8 sizej 32 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 105, check correct
Current pList size 105, grow
Current pList size 11235, eliminate equvalents
Current pList size 2320, check correct
SynProg: (j + (j + 11))
SynProg: (j + (j + 11))
Complete, program found (j + (j + 11))

Start search node 0x1f97090
i 5 j 20 sizei 16 sizej 32 _out 159
i 5 j 20 sizei 32 sizej 32 _out 159
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 136, check correct
Current pList size 136, grow
Current pList size 18768, eliminate equvalents
Current pList size 6661, check correct
SynProg: (-1 + (i * sizej))
SynProg: (-1 + (i * sizej))
Complete, program found (-1 + (i * sizej))
--------------------------------------, dump tree after search
i 5 j 20 sizei 8 sizej 8 _out 1
i 5 j 20 sizei 8 sizej 16 _out 1
i 5 j 20 sizei 8 sizej 32 _out 0
i 5 j 20 sizei 16 sizej 8 _out 1
i 5 j 20 sizei 16 sizej 16 _out 1
i 5 j 20 sizei 16 sizej 32 _out 0
i 5 j 20 sizei 32 sizej 8 _out 1
i 5 j 20 sizei 32 sizej 16 _out 1
i 5 j 20 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizej) then -1 else (if (j < (i + sizei)) then (j + (j + 11)) else (-1 + (i * sizej))))
L---i 5 j 20 sizei 8 sizej 8 _out -1
L---i 5 j 20 sizei 8 sizej 16 _out -1
L---i 5 j 20 sizei 16 sizej 8 _out -1
L---i 5 j 20 sizei 16 sizej 16 _out -1
L---i 5 j 20 sizei 32 sizej 8 _out -1
L---i 5 j 20 sizei 32 sizej 16 _out -1
Searched Program: -1
R---i 5 j 20 sizei 8 sizej 32 _out 1
R---i 5 j 20 sizei 16 sizej 32 _out 0
R---i 5 j 20 sizei 32 sizej 32 _out 0
Searched Program: (if (j < (i + sizei)) then (j + (j + 11)) else (-1 + (i * sizej)))
R---L---i 5 j 20 sizei 8 sizej 32 _out 51
Searched Program: (j + (j + 11))
R---R---i 5 j 20 sizei 16 sizej 32 _out 159
R---R---i 5 j 20 sizei 32 sizej 32 _out 159
Searched Program: (-1 + (i * sizej))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (j < sizej) then -1 else (if (j < (i + sizei)) then (j + (j + 11)) else (-1 + (i * sizej))))
--------------------------------------
