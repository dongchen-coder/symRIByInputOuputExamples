Input output examples:
    i 1 j 30 sizei 8 sizej 8    _out -1
    i 1 j 30 sizei 8 sizej 16    _out -1
    i 1 j 30 sizei 8 sizej 32    _out 55
    i 1 j 30 sizei 16 sizej 8    _out -1
    i 1 j 30 sizei 16 sizej 16    _out -1
    i 1 j 30 sizei 16 sizej 32    _out 103
    i 1 j 30 sizei 32 sizej 8    _out -1
    i 1 j 30 sizei 32 sizej 16    _out -1
    i 1 j 30 sizei 32 sizej 32    _out 0
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0xb444a0
i 1 j 30 sizei 8 sizej 8 _out -1
i 1 j 30 sizei 8 sizej 16 _out -1
i 1 j 30 sizei 8 sizej 32 _out 55
i 1 j 30 sizei 16 sizej 8 _out -1
i 1 j 30 sizei 16 sizej 16 _out -1
i 1 j 30 sizei 16 sizej 32 _out 103
i 1 j 30 sizei 32 sizej 8 _out -1
i 1 j 30 sizei 32 sizej 16 _out -1
i 1 j 30 sizei 32 sizej 32 _out 0
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 153, check correct
Current pList size 153, grow
Current pList size 23715, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 6 right size 3
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 22, check correct
SynProg: (j < sizej)
SynProg: (j < sizej)
Complete, program found (j < sizej)

Start search node 0xb43dc0
i 1 j 30 sizei 8 sizej 8 _out -1
i 1 j 30 sizei 8 sizej 16 _out -1
i 1 j 30 sizei 16 sizej 8 _out -1
i 1 j 30 sizei 16 sizej 16 _out -1
i 1 j 30 sizei 32 sizej 8 _out -1
i 1 j 30 sizei 32 sizej 16 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0xb44090
i 1 j 30 sizei 8 sizej 32 _out 55
i 1 j 30 sizei 16 sizej 32 _out 103
i 1 j 30 sizei 32 sizej 32 _out 0
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 138, check correct
Current pList size 138, grow
Current pList size 19320, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 1 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 18, check correct
SynProg: (j < sizei)
SynProg: (j < sizei)
Complete, program found (j < sizei)

Start search node 0xb3f790
i 1 j 30 sizei 32 sizej 32 _out 0
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 107, check correct
SynProg: (i + -1)
SynProg: (i + -1)
Complete, program found (i + -1)

Start search node 0xb41060
i 1 j 30 sizei 8 sizej 32 _out 55
i 1 j 30 sizei 16 sizej 32 _out 103
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 138, check correct
Current pList size 138, grow
Current pList size 19320, eliminate equvalents
Time out for bottem up search
Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 16, check correct
Current pList size 16, grow
Current pList size 321, eliminate equvalents
Current pList size 68, check correct
SynProg: (j < (sizei + sizei))
SynProg: (j < (sizei + sizei))
Complete, program found (j < (sizei + sizei))

Start search node 0xb41200
i 1 j 30 sizei 8 sizej 32 _out 55
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 107, check correct
SynProg: (5 * 11)
SynProg: (5 * 11)
Complete, program found (5 * 11)

Start search node 0xb414c0
i 1 j 30 sizei 16 sizej 32 _out 103
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 114, check correct
Current pList size 114, grow
Current pList size 13224, eliminate equvalents
Current pList size 2675, check correct
SynProg: (3 + (10 * 10))
SynProg: (3 + (10 * 10))
Complete, program found (3 + (10 * 10))
--------------------------------------, dump tree after search
i 1 j 30 sizei 8 sizej 8 _out 1
i 1 j 30 sizei 8 sizej 16 _out 1
i 1 j 30 sizei 8 sizej 32 _out 0
i 1 j 30 sizei 16 sizej 8 _out 1
i 1 j 30 sizei 16 sizej 16 _out 1
i 1 j 30 sizei 16 sizej 32 _out 0
i 1 j 30 sizei 32 sizej 8 _out 1
i 1 j 30 sizei 32 sizej 16 _out 1
i 1 j 30 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizej) then -1 else (if (j < sizei) then (i + -1) else (if (j < (sizei + sizei)) then (5 * 11) else (3 + (10 * 10)))))
L---i 1 j 30 sizei 8 sizej 8 _out -1
L---i 1 j 30 sizei 8 sizej 16 _out -1
L---i 1 j 30 sizei 16 sizej 8 _out -1
L---i 1 j 30 sizei 16 sizej 16 _out -1
L---i 1 j 30 sizei 32 sizej 8 _out -1
L---i 1 j 30 sizei 32 sizej 16 _out -1
Searched Program: -1
R---i 1 j 30 sizei 8 sizej 32 _out 0
R---i 1 j 30 sizei 16 sizej 32 _out 0
R---i 1 j 30 sizei 32 sizej 32 _out 1
Searched Program: (if (j < sizei) then (i + -1) else (if (j < (sizei + sizei)) then (5 * 11) else (3 + (10 * 10))))
R---L---i 1 j 30 sizei 32 sizej 32 _out 0
Searched Program: (i + -1)
R---R---i 1 j 30 sizei 8 sizej 32 _out 1
R---R---i 1 j 30 sizei 16 sizej 32 _out 0
Searched Program: (if (j < (sizei + sizei)) then (5 * 11) else (3 + (10 * 10)))
R---R---L---i 1 j 30 sizei 8 sizej 32 _out 55
Searched Program: (5 * 11)
R---R---R---i 1 j 30 sizei 16 sizej 32 _out 103
Searched Program: (3 + (10 * 10))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (j < sizej) then -1 else (if (j < sizei) then (i + -1) else (if (j < (sizei + sizei)) then (5 * 11) else (3 + (10 * 10)))))
--------------------------------------
