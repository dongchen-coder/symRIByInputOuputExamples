Input output examples:
    i 15 j 15 sizei 8 sizej 8    _out -1
    i 15 j 15 sizei 8 sizej 16    _out -1
    i 15 j 15 sizei 8 sizej 32    _out -1
    i 15 j 15 sizei 16 sizej 8    _out -1
    i 15 j 15 sizei 16 sizej 16    _out 16
    i 15 j 15 sizei 16 sizej 32    _out 8
    i 15 j 15 sizei 32 sizej 8    _out -1
    i 15 j 15 sizei 32 sizej 16    _out 16
    i 15 j 15 sizei 32 sizej 32    _out 112
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0xbbe4a0
i 15 j 15 sizei 8 sizej 8 _out -1
i 15 j 15 sizei 8 sizej 16 _out -1
i 15 j 15 sizei 8 sizej 32 _out -1
i 15 j 15 sizei 16 sizej 8 _out -1
i 15 j 15 sizei 16 sizej 16 _out 16
i 15 j 15 sizei 16 sizej 32 _out 8
i 15 j 15 sizei 32 sizej 8 _out -1
i 15 j 15 sizei 32 sizej 16 _out 16
i 15 j 15 sizei 32 sizej 32 _out 112
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 145, check correct
Current pList size 145, grow
Current pList size 21315, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 5 right size 4
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 16, check correct
Current pList size 16, grow
Current pList size 171, eliminate equvalents
Current pList size 66, check correct
SynProg: ((i < sizei) && (i < sizej))
SynProg: ((i < sizei) && (i < sizej))
Complete, program found ((i < sizei) && (i < sizej))

Start search node 0xbbdeb0
i 15 j 15 sizei 8 sizej 8 _out -1
i 15 j 15 sizei 8 sizej 16 _out -1
i 15 j 15 sizei 8 sizej 32 _out -1
i 15 j 15 sizei 16 sizej 8 _out -1
i 15 j 15 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0xbbe270
i 15 j 15 sizei 16 sizej 16 _out 16
i 15 j 15 sizei 16 sizej 32 _out 8
i 15 j 15 sizei 32 sizej 16 _out 16
i 15 j 15 sizei 32 sizej 32 _out 112
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 145, check correct
Current pList size 145, grow
Current pList size 21315, eliminate equvalents
Time out for bottem up search
Current node size 4 Split to two: left size 3 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 13, check correct
Current pList size 13, grow
Current pList size 150, eliminate equvalents
Current pList size 44, check correct
Current pList size 44, grow
Current pList size 1851, eliminate equvalents
Current pList size 179, check correct
SynProg: ((! (sizei < sizej) ) && ((i + i) < sizej))
SynProg: ((! (sizei < sizej) ) && ((i + i) < sizej))
Complete, program found ((! (sizei < sizej) ) && ((i + i) < sizej))

Start search node 0xbb9f60
i 15 j 15 sizei 16 sizej 16 _out 16
i 15 j 15 sizei 16 sizej 32 _out 8
i 15 j 15 sizei 32 sizej 16 _out 16
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 145, check correct
Current pList size 145, grow
Current pList size 21315, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 1 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 13, check correct
SynProg: (sizei < sizej)
SynProg: (sizei < sizej)
Complete, program found (sizei < sizej)

Start search node 0xbbe450
i 15 j 15 sizei 16 sizej 32 _out 8
Searched Program: 
Init pList size 17, check correct
SynProg: 8
SynProg: 8
Complete, program found 8

Start search node 0xbbe360
i 15 j 15 sizei 16 sizej 16 _out 16
i 15 j 15 sizei 32 sizej 16 _out 16
Searched Program: 
Init pList size 17, check correct
SynProg: sizej
SynProg: sizej
Complete, program found sizej

Start search node 0xbb9ba0
i 15 j 15 sizei 32 sizej 32 _out 112
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 105, check correct
Current pList size 105, grow
Current pList size 11235, eliminate equvalents
Time out for bottem up search
Current node size 1 Split current node, failed
Search fcase failed
Search fcase failed
--------------------------------------, dump tree after search
i 15 j 15 sizei 8 sizej 8 _out 1
i 15 j 15 sizei 8 sizej 16 _out 1
i 15 j 15 sizei 8 sizej 32 _out 1
i 15 j 15 sizei 16 sizej 8 _out 1
i 15 j 15 sizei 16 sizej 16 _out 0
i 15 j 15 sizei 16 sizej 32 _out 0
i 15 j 15 sizei 32 sizej 8 _out 1
i 15 j 15 sizei 32 sizej 16 _out 0
i 15 j 15 sizei 32 sizej 32 _out 0
Searched Program: 
L---i 15 j 15 sizei 8 sizej 8 _out -1
L---i 15 j 15 sizei 8 sizej 16 _out -1
L---i 15 j 15 sizei 8 sizej 32 _out -1
L---i 15 j 15 sizei 16 sizej 8 _out -1
L---i 15 j 15 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 15 j 15 sizei 16 sizej 16 _out 1
R---i 15 j 15 sizei 16 sizej 32 _out 1
R---i 15 j 15 sizei 32 sizej 16 _out 1
R---i 15 j 15 sizei 32 sizej 32 _out 0
Searched Program: 
R---L---i 15 j 15 sizei 16 sizej 16 _out 0
R---L---i 15 j 15 sizei 16 sizej 32 _out 1
R---L---i 15 j 15 sizei 32 sizej 16 _out 0
Searched Program: (if (sizei < sizej) then 8 else sizej)
R---L---L---i 15 j 15 sizei 16 sizej 32 _out 8
Searched Program: 8
R---L---R---i 15 j 15 sizei 16 sizej 16 _out 16
R---L---R---i 15 j 15 sizei 32 sizej 16 _out 16
Searched Program: sizej
R---R---i 15 j 15 sizei 32 sizej 32 _out 112
Searched Program: 
--------------------------------------
--------------------------------------, dump search result start
Not yet founded, (T^T)
--------------------------------------
