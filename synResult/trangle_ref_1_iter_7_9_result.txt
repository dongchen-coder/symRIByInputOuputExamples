Input output examples:
    i 7 j 9 sizei 8 sizej 8    _out -1
    i 7 j 9 sizei 8 sizej 16    _out 51
    i 7 j 9 sizei 8 sizej 32    _out 28
    i 7 j 9 sizei 16 sizej 8    _out -1
    i 7 j 9 sizei 16 sizej 16    _out 51
    i 7 j 9 sizei 16 sizej 32    _out 35
    i 7 j 9 sizei 32 sizej 8    _out -1
    i 7 j 9 sizei 32 sizej 16    _out 51
    i 7 j 9 sizei 32 sizej 32    _out 147
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x1a244a0
i 7 j 9 sizei 8 sizej 8 _out -1
i 7 j 9 sizei 8 sizej 16 _out 51
i 7 j 9 sizei 8 sizej 32 _out 28
i 7 j 9 sizei 16 sizej 8 _out -1
i 7 j 9 sizei 16 sizej 16 _out 51
i 7 j 9 sizei 16 sizej 32 _out 35
i 7 j 9 sizei 32 sizej 8 _out -1
i 7 j 9 sizei 32 sizej 16 _out 51
i 7 j 9 sizei 32 sizej 32 _out 147
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 3 right size 6
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 22, check correct
SynProg: (j < sizej)
SynProg: (j < sizej)
Complete, program found (j < sizej)

Start search node 0x1a243b0
i 7 j 9 sizei 8 sizej 8 _out -1
i 7 j 9 sizei 16 sizej 8 _out -1
i 7 j 9 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0x1a25900
i 7 j 9 sizei 8 sizej 16 _out 51
i 7 j 9 sizei 8 sizej 32 _out 28
i 7 j 9 sizei 16 sizej 16 _out 51
i 7 j 9 sizei 16 sizej 32 _out 35
i 7 j 9 sizei 32 sizej 16 _out 51
i 7 j 9 sizei 32 sizej 32 _out 147
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Time out for bottem up search
Current node size 6 Split to two: left size 5 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 20, check correct
Current pList size 20, grow
Current pList size 343, eliminate equvalents
Current pList size 85, check correct
Current pList size 85, grow
Current pList size 7398, eliminate equvalents
Current pList size 525, check correct
SynProg: ((! (sizei < sizej) ) && ((i + j) < sizej))
SynProg: ((! (sizei < sizej) ) && ((i + j) < sizej))
Complete, program found ((! (sizei < sizej) ) && ((i + j) < sizej))

Start search node 0x1a23910
i 7 j 9 sizei 8 sizej 16 _out 51
i 7 j 9 sizei 8 sizej 32 _out 28
i 7 j 9 sizei 16 sizej 16 _out 51
i 7 j 9 sizei 16 sizej 32 _out 35
i 7 j 9 sizei 32 sizej 16 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Time out for bottem up search
Current node size 5 Split to two: left size 2 right size 3
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 20, check correct
Current pList size 20, grow
Current pList size 343, eliminate equvalents
Current pList size 81, check correct
SynProg: (sizej < (j + j))
SynProg: (sizej < (j + j))
Complete, program found (sizej < (j + j))

Start search node 0x1a1fec0
i 7 j 9 sizei 8 sizej 32 _out 28
i 7 j 9 sizei 16 sizej 32 _out 35
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 123, check correct
Current pList size 123, grow
Current pList size 15375, eliminate equvalents
Current pList size 5557, check correct
Current pList size 5557, grow
Time out for bottem up search
Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 18, check correct
SynProg: (j < sizei)
SynProg: (j < sizei)
Complete, program found (j < sizei)

Start search node 0x1a1f330
i 7 j 9 sizei 8 sizej 32 _out 28
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
SynProg: (i * 4)
SynProg: (i * 4)
Complete, program found (i * 4)

Start search node 0x1a242c0
i 7 j 9 sizei 16 sizej 32 _out 35
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
SynProg: (sizej + 3)
SynProg: (sizej + 3)
Complete, program found (sizej + 3)

Start search node 0x1a26900
i 7 j 9 sizei 8 sizej 16 _out 51
i 7 j 9 sizei 16 sizej 16 _out 51
i 7 j 9 sizei 32 sizej 16 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 113, check correct
Current pList size 113, grow
Current pList size 12995, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 1 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 18, check correct
Current pList size 18, grow
Current pList size 294, eliminate equvalents
Current pList size 60, check correct
Current pList size 60, grow
Current pList size 4483, eliminate equvalents
Current pList size 291, check correct
SynProg: ((i + i) + ((i + i) + (i + sizej)))
SynProg: ((i + i) + ((i + i) + (i + sizej)))
Complete, program found ((i + i) + ((i + i) + (i + sizej)))

Start search node 0x1a1f600
i 7 j 9 sizei 8 sizej 16 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 84, check correct
Current pList size 84, grow
Current pList size 7224, eliminate equvalents
Current pList size 1275, check correct
SynProg: (i + (4 * 11))
SynProg: (i + (4 * 11))
Complete, program found (i + (4 * 11))

Start search node 0x1a270e0
i 7 j 9 sizei 16 sizej 16 _out 51
i 7 j 9 sizei 32 sizej 16 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 113, check correct
Current pList size 113, grow
Current pList size 12995, eliminate equvalents
Time out for bottem up search
Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 16, check correct
Current pList size 16, grow
Current pList size 283, eliminate equvalents
Current pList size 58, check correct
Current pList size 58, grow
Current pList size 4470, eliminate equvalents
Current pList size 288, check correct
SynProg: ((i + i) + ((i + i) + (i + sizej)))
SynProg: ((i + i) + ((i + i) + (i + sizej)))
Complete, program found ((i + i) + ((i + i) + (i + sizej)))

Start search node 0x1a1fd30
i 7 j 9 sizei 16 sizej 16 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 84, check correct
Current pList size 84, grow
Current pList size 7224, eliminate equvalents
Current pList size 1275, check correct
SynProg: (i + (4 * 11))
SynProg: (i + (4 * 11))
Complete, program found (i + (4 * 11))

Start search node 0x1a1f560
i 7 j 9 sizei 32 sizej 16 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
Current pList size 99, grow
Current pList size 9999, eliminate equvalents
Current pList size 2045, check correct
SynProg: (i + (sizei + 12))
SynProg: (i + (sizei + 12))
Complete, program found (i + (sizei + 12))

Start search node 0x1a1fb50
i 7 j 9 sizei 32 sizej 32 _out 147
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
Current pList size 94, grow
Current pList size 9024, eliminate equvalents
Current pList size 1935, check correct
SynProg: (3 + (12 * 12))
SynProg: (3 + (12 * 12))
Complete, program found (3 + (12 * 12))
--------------------------------------, dump tree after search
i 7 j 9 sizei 8 sizej 8 _out 1
i 7 j 9 sizei 8 sizej 16 _out 0
i 7 j 9 sizei 8 sizej 32 _out 0
i 7 j 9 sizei 16 sizej 8 _out 1
i 7 j 9 sizei 16 sizej 16 _out 0
i 7 j 9 sizei 16 sizej 32 _out 0
i 7 j 9 sizei 32 sizej 8 _out 1
i 7 j 9 sizei 32 sizej 16 _out 0
i 7 j 9 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizej) then -1 else (if ((! (sizei < sizej) ) && ((i + j) < sizej)) then (if (sizej < (j + j)) then (if (j < sizei) then (i * 4) else (sizej + 3)) else (if ((i + i) + ((i + i) + (i + sizej))) then (i + (4 * 11)) else (if ((i + i) + ((i + i) + (i + sizej))) then (i + (4 * 11)) else (i + (sizei + 12))))) else (3 + (12 * 12))))
L---i 7 j 9 sizei 8 sizej 8 _out -1
L---i 7 j 9 sizei 16 sizej 8 _out -1
L---i 7 j 9 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 7 j 9 sizei 8 sizej 16 _out 1
R---i 7 j 9 sizei 8 sizej 32 _out 1
R---i 7 j 9 sizei 16 sizej 16 _out 1
R---i 7 j 9 sizei 16 sizej 32 _out 1
R---i 7 j 9 sizei 32 sizej 16 _out 1
R---i 7 j 9 sizei 32 sizej 32 _out 0
Searched Program: (if ((! (sizei < sizej) ) && ((i + j) < sizej)) then (if (sizej < (j + j)) then (if (j < sizei) then (i * 4) else (sizej + 3)) else (if ((i + i) + ((i + i) + (i + sizej))) then (i + (4 * 11)) else (if ((i + i) + ((i + i) + (i + sizej))) then (i + (4 * 11)) else (i + (sizei + 12))))) else (3 + (12 * 12)))
R---L---i 7 j 9 sizei 8 sizej 16 _out 0
R---L---i 7 j 9 sizei 8 sizej 32 _out 1
R---L---i 7 j 9 sizei 16 sizej 16 _out 0
R---L---i 7 j 9 sizei 16 sizej 32 _out 1
R---L---i 7 j 9 sizei 32 sizej 16 _out 0
Searched Program: (if (sizej < (j + j)) then (if (j < sizei) then (i * 4) else (sizej + 3)) else (if ((i + i) + ((i + i) + (i + sizej))) then (i + (4 * 11)) else (if ((i + i) + ((i + i) + (i + sizej))) then (i + (4 * 11)) else (i + (sizei + 12)))))
R---L---L---i 7 j 9 sizei 8 sizej 32 _out 1
R---L---L---i 7 j 9 sizei 16 sizej 32 _out 0
Searched Program: (if (j < sizei) then (i * 4) else (sizej + 3))
R---L---L---L---i 7 j 9 sizei 8 sizej 32 _out 28
Searched Program: (i * 4)
R---L---L---R---i 7 j 9 sizei 16 sizej 32 _out 35
Searched Program: (sizej + 3)
R---L---R---i 7 j 9 sizei 8 sizej 16 _out 51
R---L---R---i 7 j 9 sizei 16 sizej 16 _out 51
R---L---R---i 7 j 9 sizei 32 sizej 16 _out 51
Searched Program: (if ((i + i) + ((i + i) + (i + sizej))) then (i + (4 * 11)) else (if ((i + i) + ((i + i) + (i + sizej))) then (i + (4 * 11)) else (i + (sizei + 12))))
R---L---R---L---i 7 j 9 sizei 8 sizej 16 _out 51
Searched Program: (i + (4 * 11))
R---L---R---R---i 7 j 9 sizei 16 sizej 16 _out 51
R---L---R---R---i 7 j 9 sizei 32 sizej 16 _out 51
Searched Program: (if ((i + i) + ((i + i) + (i + sizej))) then (i + (4 * 11)) else (i + (sizei + 12)))
R---L---R---R---L---i 7 j 9 sizei 16 sizej 16 _out 51
Searched Program: (i + (4 * 11))
R---L---R---R---R---i 7 j 9 sizei 32 sizej 16 _out 51
Searched Program: (i + (sizei + 12))
R---R---i 7 j 9 sizei 32 sizej 32 _out 147
Searched Program: (3 + (12 * 12))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (j < sizej) then -1 else (if ((! (sizei < sizej) ) && ((i + j) < sizej)) then (if (sizej < (j + j)) then (if (j < sizei) then (i * 4) else (sizej + 3)) else (if ((i + i) + ((i + i) + (i + sizej))) then (i + (4 * 11)) else (if ((i + i) + ((i + i) + (i + sizej))) then (i + (4 * 11)) else (i + (sizei + 12))))) else (3 + (12 * 12))))
--------------------------------------
