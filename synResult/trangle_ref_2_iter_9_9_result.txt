Input output examples:
    i 9 j 9 sizei 8 sizej 8    _out -1
    i 9 j 9 sizei 8 sizej 16    _out -1
    i 9 j 9 sizei 8 sizej 32    _out -1
    i 9 j 9 sizei 16 sizej 8    _out -1
    i 9 j 9 sizei 16 sizej 16    _out 52
    i 9 j 9 sizei 16 sizej 32    _out 36
    i 9 j 9 sizei 32 sizej 8    _out -1
    i 9 j 9 sizei 32 sizej 16    _out 52
    i 9 j 9 sizei 32 sizej 32    _out 148
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x18914a0
i 9 j 9 sizei 8 sizej 8 _out -1
i 9 j 9 sizei 8 sizej 16 _out -1
i 9 j 9 sizei 8 sizej 32 _out -1
i 9 j 9 sizei 16 sizej 8 _out -1
i 9 j 9 sizei 16 sizej 16 _out 52
i 9 j 9 sizei 16 sizej 32 _out 36
i 9 j 9 sizei 32 sizej 8 _out -1
i 9 j 9 sizei 32 sizej 16 _out 52
i 9 j 9 sizei 32 sizej 32 _out 148
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 5 right size 4
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 16, check correct
Current pList size 16, grow
Current pList size 171, eliminate equvalents
Current pList size 65, check correct
SynProg: ((i < sizei) && (i < sizej))
SynProg: ((i < sizei) && (i < sizej))
Complete, program found ((i < sizei) && (i < sizej))

Start search node 0x1890eb0
i 9 j 9 sizei 8 sizej 8 _out -1
i 9 j 9 sizei 8 sizej 16 _out -1
i 9 j 9 sizei 8 sizej 32 _out -1
i 9 j 9 sizei 16 sizej 8 _out -1
i 9 j 9 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0x1891270
i 9 j 9 sizei 16 sizej 16 _out 52
i 9 j 9 sizei 16 sizej 32 _out 36
i 9 j 9 sizei 32 sizej 16 _out 52
i 9 j 9 sizei 32 sizej 32 _out 148
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Time out for bottem up search
Current node size 4 Split to two: left size 3 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 13, check correct
Current pList size 13, grow
Current pList size 150, eliminate equvalents
Current pList size 44, check correct
Current pList size 44, grow
Current pList size 1851, eliminate equvalents
Current pList size 178, check correct
SynProg: ((! (sizei < sizej) ) && ((i + i) < sizej))
SynProg: ((! (sizei < sizej) ) && ((i + i) < sizej))
Complete, program found ((! (sizei < sizej) ) && ((i + i) < sizej))

Start search node 0x188cf60
i 9 j 9 sizei 16 sizej 16 _out 52
i 9 j 9 sizei 16 sizej 32 _out 36
i 9 j 9 sizei 32 sizej 16 _out 52
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 1 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 13, check correct
SynProg: (sizei < sizej)
SynProg: (sizei < sizej)
Complete, program found (sizei < sizej)

Start search node 0x1891450
i 9 j 9 sizei 16 sizej 32 _out 36
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
SynProg: (sizej + 4)
SynProg: (sizej + 4)
Complete, program found (sizej + 4)

Start search node 0x1891360
i 9 j 9 sizei 16 sizej 16 _out 52
i 9 j 9 sizei 32 sizej 16 _out 52
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 113, check correct
Current pList size 113, grow
Current pList size 12995, eliminate equvalents
Time out for bottem up search
Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 12, check correct
Current pList size 12, grow
Current pList size 145, eliminate equvalents
Current pList size 38, check correct
Current pList size 38, grow
Current pList size 1800, eliminate equvalents
Current pList size 168, check correct
SynProg: (i + ((i + i) + (i + sizej)))
SynProg: (i + ((i + i) + (i + sizej)))
Complete, program found (i + ((i + i) + (i + sizej)))

Start search node 0x188cc90
i 9 j 9 sizei 16 sizej 16 _out 52
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 84, check correct
Current pList size 84, grow
Current pList size 7224, eliminate equvalents
Current pList size 1275, check correct
SynProg: (sizei + (i * 4))
SynProg: (sizei + (i * 4))
Complete, program found (sizei + (i * 4))

Start search node 0x18907d0
i 9 j 9 sizei 32 sizej 16 _out 52
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
Current pList size 99, grow
Current pList size 9999, eliminate equvalents
Current pList size 2045, check correct
SynProg: (i + (sizei + 11))
SynProg: (i + (sizei + 11))
Complete, program found (i + (sizei + 11))

Start search node 0x188cba0
i 9 j 9 sizei 32 sizej 32 _out 148
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
Current pList size 94, grow
Current pList size 9024, eliminate equvalents
Current pList size 1935, check correct
SynProg: (4 + (12 * 12))
SynProg: (4 + (12 * 12))
Complete, program found (4 + (12 * 12))
--------------------------------------, dump tree after search
i 9 j 9 sizei 8 sizej 8 _out 1
i 9 j 9 sizei 8 sizej 16 _out 1
i 9 j 9 sizei 8 sizej 32 _out 1
i 9 j 9 sizei 16 sizej 8 _out 1
i 9 j 9 sizei 16 sizej 16 _out 0
i 9 j 9 sizei 16 sizej 32 _out 0
i 9 j 9 sizei 32 sizej 8 _out 1
i 9 j 9 sizei 32 sizej 16 _out 0
i 9 j 9 sizei 32 sizej 32 _out 0
Searched Program: (if ((i < sizei) && (i < sizej)) then -1 else (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then (if (sizei < sizej) then (sizej + 4) else (if (i + ((i + i) + (i + sizej))) then (sizei + (i * 4)) else (i + (sizei + 11)))) else (4 + (12 * 12))))
L---i 9 j 9 sizei 8 sizej 8 _out -1
L---i 9 j 9 sizei 8 sizej 16 _out -1
L---i 9 j 9 sizei 8 sizej 32 _out -1
L---i 9 j 9 sizei 16 sizej 8 _out -1
L---i 9 j 9 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 9 j 9 sizei 16 sizej 16 _out 1
R---i 9 j 9 sizei 16 sizej 32 _out 1
R---i 9 j 9 sizei 32 sizej 16 _out 1
R---i 9 j 9 sizei 32 sizej 32 _out 0
Searched Program: (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then (if (sizei < sizej) then (sizej + 4) else (if (i + ((i + i) + (i + sizej))) then (sizei + (i * 4)) else (i + (sizei + 11)))) else (4 + (12 * 12)))
R---L---i 9 j 9 sizei 16 sizej 16 _out 0
R---L---i 9 j 9 sizei 16 sizej 32 _out 1
R---L---i 9 j 9 sizei 32 sizej 16 _out 0
Searched Program: (if (sizei < sizej) then (sizej + 4) else (if (i + ((i + i) + (i + sizej))) then (sizei + (i * 4)) else (i + (sizei + 11))))
R---L---L---i 9 j 9 sizei 16 sizej 32 _out 36
Searched Program: (sizej + 4)
R---L---R---i 9 j 9 sizei 16 sizej 16 _out 52
R---L---R---i 9 j 9 sizei 32 sizej 16 _out 52
Searched Program: (if (i + ((i + i) + (i + sizej))) then (sizei + (i * 4)) else (i + (sizei + 11)))
R---L---R---L---i 9 j 9 sizei 16 sizej 16 _out 52
Searched Program: (sizei + (i * 4))
R---L---R---R---i 9 j 9 sizei 32 sizej 16 _out 52
Searched Program: (i + (sizei + 11))
R---R---i 9 j 9 sizei 32 sizej 32 _out 148
Searched Program: (4 + (12 * 12))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if ((i < sizei) && (i < sizej)) then -1 else (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then (if (sizei < sizej) then (sizej + 4) else (if (i + ((i + i) + (i + sizej))) then (sizei + (i * 4)) else (i + (sizei + 11)))) else (4 + (12 * 12))))
--------------------------------------
