Input output examples:
    i 2 j 13 sizei 8 sizej 8    _out -1
    i 2 j 13 sizei 8 sizej 16    _out 51
    i 2 j 13 sizei 8 sizej 32    _out 51
    i 2 j 13 sizei 16 sizej 8    _out -1
    i 2 j 13 sizei 16 sizej 16    _out 81
    i 2 j 13 sizei 16 sizej 32    _out 73
    i 2 j 13 sizei 32 sizej 8    _out -1
    i 2 j 13 sizei 32 sizej 16    _out 81
    i 2 j 13 sizei 32 sizej 32    _out 177
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x1c3b4a0
i 2 j 13 sizei 8 sizej 8 _out -1
i 2 j 13 sizei 8 sizej 16 _out 51
i 2 j 13 sizei 8 sizej 32 _out 51
i 2 j 13 sizei 16 sizej 8 _out -1
i 2 j 13 sizei 16 sizej 16 _out 81
i 2 j 13 sizei 16 sizej 32 _out 73
i 2 j 13 sizei 32 sizej 8 _out -1
i 2 j 13 sizei 32 sizej 16 _out 81
i 2 j 13 sizei 32 sizej 32 _out 177
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 149, check correct
Current pList size 149, grow
Current pList size 22499, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 3 right size 6
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 22, check correct
SynProg: (j < sizej)
SynProg: (j < sizej)
Complete, program found (j < sizej)

Start search node 0x1c3b3b0
i 2 j 13 sizei 8 sizej 8 _out -1
i 2 j 13 sizei 16 sizej 8 _out -1
i 2 j 13 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0x1c3c900
i 2 j 13 sizei 8 sizej 16 _out 51
i 2 j 13 sizei 8 sizej 32 _out 51
i 2 j 13 sizei 16 sizej 16 _out 81
i 2 j 13 sizei 16 sizej 32 _out 73
i 2 j 13 sizei 32 sizej 16 _out 81
i 2 j 13 sizei 32 sizej 32 _out 177
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 149, check correct
Current pList size 149, grow
Current pList size 22499, eliminate equvalents
Time out for bottem up search
Current node size 6 Split to two: left size 3 right size 3
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 20, check correct
SynProg: (sizei < sizej)
SynProg: (sizei < sizej)
Complete, program found (sizei < sizej)

Start search node 0x1c366a0
i 2 j 13 sizei 8 sizej 16 _out 51
i 2 j 13 sizei 8 sizej 32 _out 51
i 2 j 13 sizei 16 sizej 32 _out 73
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 149, check correct
Current pList size 149, grow
Current pList size 22499, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 2 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 18, check correct
SynProg: (j < sizei)
SynProg: (j < sizei)
Complete, program found (j < sizei)

Start search node 0x1c38060
i 2 j 13 sizei 8 sizej 16 _out 51
i 2 j 13 sizei 8 sizej 32 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 118, check correct
Current pList size 118, grow
Current pList size 14160, eliminate equvalents
Current pList size 4706, check correct
SynProg: (i + (7 * 7))
SynProg: (i + (7 * 7))
Complete, program found (i + (7 * 7))

Start search node 0x1c36b00
i 2 j 13 sizei 16 sizej 32 _out 73
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 113, check correct
Current pList size 113, grow
Current pList size 12995, eliminate equvalents
Current pList size 2536, check correct
SynProg: (j + (5 * 12))
SynProg: (j + (5 * 12))
Complete, program found (j + (5 * 12))

Start search node 0x1c36830
i 2 j 13 sizei 16 sizej 16 _out 81
i 2 j 13 sizei 32 sizej 16 _out 81
i 2 j 13 sizei 32 sizej 32 _out 177
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 149, check correct
Current pList size 149, grow
Current pList size 22499, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 2 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 17, check correct
Current pList size 17, grow
Current pList size 325, eliminate equvalents
Current pList size 77, check correct
SynProg: (sizej < (j + j))
SynProg: (sizej < (j + j))
Complete, program found (sizej < (j + j))

Start search node 0x1c369c0
i 2 j 13 sizei 16 sizej 16 _out 81
i 2 j 13 sizei 32 sizej 16 _out 81
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 129, check correct
SynProg: (9 * 9)
SynProg: (9 * 9)
Complete, program found (9 * 9)

Start search node 0x1c3a780
i 2 j 13 sizei 32 sizej 32 _out 177
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 107, check correct
Current pList size 107, grow
Current pList size 11663, eliminate equvalents
Current pList size 2348, check correct
SynProg: (8 + (j * j))
SynProg: (8 + (j * j))
Complete, program found (8 + (j * j))
--------------------------------------, dump tree after search
i 2 j 13 sizei 8 sizej 8 _out 1
i 2 j 13 sizei 8 sizej 16 _out 0
i 2 j 13 sizei 8 sizej 32 _out 0
i 2 j 13 sizei 16 sizej 8 _out 1
i 2 j 13 sizei 16 sizej 16 _out 0
i 2 j 13 sizei 16 sizej 32 _out 0
i 2 j 13 sizei 32 sizej 8 _out 1
i 2 j 13 sizei 32 sizej 16 _out 0
i 2 j 13 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizej) then -1 else (if (sizei < sizej) then (if (j < sizei) then (i + (7 * 7)) else (j + (5 * 12))) else (if (sizej < (j + j)) then (9 * 9) else (8 + (j * j)))))
L---i 2 j 13 sizei 8 sizej 8 _out -1
L---i 2 j 13 sizei 16 sizej 8 _out -1
L---i 2 j 13 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 2 j 13 sizei 8 sizej 16 _out 1
R---i 2 j 13 sizei 8 sizej 32 _out 1
R---i 2 j 13 sizei 16 sizej 16 _out 0
R---i 2 j 13 sizei 16 sizej 32 _out 1
R---i 2 j 13 sizei 32 sizej 16 _out 0
R---i 2 j 13 sizei 32 sizej 32 _out 0
Searched Program: (if (sizei < sizej) then (if (j < sizei) then (i + (7 * 7)) else (j + (5 * 12))) else (if (sizej < (j + j)) then (9 * 9) else (8 + (j * j))))
R---L---i 2 j 13 sizei 8 sizej 16 _out 1
R---L---i 2 j 13 sizei 8 sizej 32 _out 1
R---L---i 2 j 13 sizei 16 sizej 32 _out 0
Searched Program: (if (j < sizei) then (i + (7 * 7)) else (j + (5 * 12)))
R---L---L---i 2 j 13 sizei 8 sizej 16 _out 51
R---L---L---i 2 j 13 sizei 8 sizej 32 _out 51
Searched Program: (i + (7 * 7))
R---L---R---i 2 j 13 sizei 16 sizej 32 _out 73
Searched Program: (j + (5 * 12))
R---R---i 2 j 13 sizei 16 sizej 16 _out 1
R---R---i 2 j 13 sizei 32 sizej 16 _out 1
R---R---i 2 j 13 sizei 32 sizej 32 _out 0
Searched Program: (if (sizej < (j + j)) then (9 * 9) else (8 + (j * j)))
R---R---L---i 2 j 13 sizei 16 sizej 16 _out 81
R---R---L---i 2 j 13 sizei 32 sizej 16 _out 81
Searched Program: (9 * 9)
R---R---R---i 2 j 13 sizei 32 sizej 32 _out 177
Searched Program: (8 + (j * j))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (j < sizej) then -1 else (if (sizei < sizej) then (if (j < sizei) then (i + (7 * 7)) else (j + (5 * 12))) else (if (sizej < (j + j)) then (9 * 9) else (8 + (j * j)))))
--------------------------------------
