Input output examples:
    i 11 j 13 sizei 8 sizej 8    _out -1
    i 11 j 13 sizei 8 sizej 16    _out -1
    i 11 j 13 sizei 8 sizej 32    _out -1
    i 11 j 13 sizei 16 sizej 8    _out -1
    i 11 j 13 sizei 16 sizej 16    _out 27
    i 11 j 13 sizei 16 sizej 32    _out 19
    i 11 j 13 sizei 32 sizej 8    _out -1
    i 11 j 13 sizei 32 sizej 16    _out 27
    i 11 j 13 sizei 32 sizej 32    _out 123
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0xaca4a0
i 11 j 13 sizei 8 sizej 8 _out -1
i 11 j 13 sizei 8 sizej 16 _out -1
i 11 j 13 sizei 8 sizej 32 _out -1
i 11 j 13 sizei 16 sizej 8 _out -1
i 11 j 13 sizei 16 sizej 16 _out 27
i 11 j 13 sizei 16 sizej 32 _out 19
i 11 j 13 sizei 32 sizej 8 _out -1
i 11 j 13 sizei 32 sizej 16 _out 27
i 11 j 13 sizei 32 sizej 32 _out 123
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 149, check correct
Current pList size 149, grow
Current pList size 22499, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 5 right size 4
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 22, check correct
Current pList size 22, grow
Current pList size 360, eliminate equvalents
Current pList size 102, check correct
SynProg: ((i < sizei) && (i < sizej))
SynProg: ((i < sizei) && (i < sizej))
Complete, program found ((i < sizei) && (i < sizej))

Start search node 0xac9eb0
i 11 j 13 sizei 8 sizej 8 _out -1
i 11 j 13 sizei 8 sizej 16 _out -1
i 11 j 13 sizei 8 sizej 32 _out -1
i 11 j 13 sizei 16 sizej 8 _out -1
i 11 j 13 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0xaca270
i 11 j 13 sizei 16 sizej 16 _out 27
i 11 j 13 sizei 16 sizej 32 _out 19
i 11 j 13 sizei 32 sizej 16 _out 27
i 11 j 13 sizei 32 sizej 32 _out 123
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 149, check correct
Current pList size 149, grow
Current pList size 22499, eliminate equvalents
Time out for bottem up search
Current node size 4 Split to two: left size 3 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 18, check correct
Current pList size 18, grow
Current pList size 330, eliminate equvalents
Current pList size 79, check correct
Current pList size 79, grow
Current pList size 7311, eliminate equvalents
Current pList size 509, check correct
SynProg: ((! (sizei < sizej) ) && ((i + i) < sizej))
SynProg: ((! (sizei < sizej) ) && ((i + i) < sizej))
Complete, program found ((! (sizei < sizej) ) && ((i + i) < sizej))

Start search node 0xac5f60
i 11 j 13 sizei 16 sizej 16 _out 27
i 11 j 13 sizei 16 sizej 32 _out 19
i 11 j 13 sizei 32 sizej 16 _out 27
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 149, check correct
Current pList size 149, grow
Current pList size 22499, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 1 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 18, check correct
SynProg: (sizei < sizej)
SynProg: (sizei < sizej)
Complete, program found (sizei < sizej)

Start search node 0xaca450
i 11 j 13 sizei 16 sizej 32 _out 19
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 113, check correct
SynProg: (i + 8)
SynProg: (i + 8)
Complete, program found (i + 8)

Start search node 0xaca360
i 11 j 13 sizei 16 sizej 16 _out 27
i 11 j 13 sizei 32 sizej 16 _out 27
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 129, check correct
SynProg: (i + sizej)
SynProg: (i + sizej)
Complete, program found (i + sizej)

Start search node 0xac5ba0
i 11 j 13 sizei 32 sizej 32 _out 123
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 107, check correct
Current pList size 107, grow
Current pList size 11663, eliminate equvalents
Current pList size 2348, check correct
SynProg: (j + (i * 10))
SynProg: (j + (i * 10))
Complete, program found (j + (i * 10))
--------------------------------------, dump tree after search
i 11 j 13 sizei 8 sizej 8 _out 1
i 11 j 13 sizei 8 sizej 16 _out 1
i 11 j 13 sizei 8 sizej 32 _out 1
i 11 j 13 sizei 16 sizej 8 _out 1
i 11 j 13 sizei 16 sizej 16 _out 0
i 11 j 13 sizei 16 sizej 32 _out 0
i 11 j 13 sizei 32 sizej 8 _out 1
i 11 j 13 sizei 32 sizej 16 _out 0
i 11 j 13 sizei 32 sizej 32 _out 0
Searched Program: (if ((i < sizei) && (i < sizej)) then -1 else (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then (if (sizei < sizej) then (i + 8) else (i + sizej)) else (j + (i * 10))))
L---i 11 j 13 sizei 8 sizej 8 _out -1
L---i 11 j 13 sizei 8 sizej 16 _out -1
L---i 11 j 13 sizei 8 sizej 32 _out -1
L---i 11 j 13 sizei 16 sizej 8 _out -1
L---i 11 j 13 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 11 j 13 sizei 16 sizej 16 _out 1
R---i 11 j 13 sizei 16 sizej 32 _out 1
R---i 11 j 13 sizei 32 sizej 16 _out 1
R---i 11 j 13 sizei 32 sizej 32 _out 0
Searched Program: (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then (if (sizei < sizej) then (i + 8) else (i + sizej)) else (j + (i * 10)))
R---L---i 11 j 13 sizei 16 sizej 16 _out 0
R---L---i 11 j 13 sizei 16 sizej 32 _out 1
R---L---i 11 j 13 sizei 32 sizej 16 _out 0
Searched Program: (if (sizei < sizej) then (i + 8) else (i + sizej))
R---L---L---i 11 j 13 sizei 16 sizej 32 _out 19
Searched Program: (i + 8)
R---L---R---i 11 j 13 sizei 16 sizej 16 _out 27
R---L---R---i 11 j 13 sizei 32 sizej 16 _out 27
Searched Program: (i + sizej)
R---R---i 11 j 13 sizei 32 sizej 32 _out 123
Searched Program: (j + (i * 10))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if ((i < sizei) && (i < sizej)) then -1 else (if ((! (sizei < sizej) ) && ((i + i) < sizej)) then (if (sizei < sizej) then (i + 8) else (i + sizej)) else (j + (i * 10))))
--------------------------------------
