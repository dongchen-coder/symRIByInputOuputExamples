Input output examples:
    i 3 j 14 sizei 8 sizej 8    _out -1
    i 3 j 14 sizei 8 sizej 16    _out 51
    i 3 j 14 sizei 8 sizej 32    _out 51
    i 3 j 14 sizei 16 sizej 8    _out -1
    i 3 j 14 sizei 16 sizej 16    _out 75
    i 3 j 14 sizei 16 sizej 32    _out 72
    i 3 j 14 sizei 32 sizej 8    _out -1
    i 3 j 14 sizei 32 sizej 16    _out 75
    i 3 j 14 sizei 32 sizej 32    _out 171
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x8f64a0
i 3 j 14 sizei 8 sizej 8 _out -1
i 3 j 14 sizei 8 sizej 16 _out 51
i 3 j 14 sizei 8 sizej 32 _out 51
i 3 j 14 sizei 16 sizej 8 _out -1
i 3 j 14 sizei 16 sizej 16 _out 75
i 3 j 14 sizei 16 sizej 32 _out 72
i 3 j 14 sizei 32 sizej 8 _out -1
i 3 j 14 sizei 32 sizej 16 _out 75
i 3 j 14 sizei 32 sizej 32 _out 171
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 145, check correct
Current pList size 145, grow
Current pList size 21315, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 3 right size 6
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 22, check correct
SynProg: (j < sizej)
SynProg: (j < sizej)
Complete, program found (j < sizej)

Start search node 0x8f63b0
i 3 j 14 sizei 8 sizej 8 _out -1
i 3 j 14 sizei 16 sizej 8 _out -1
i 3 j 14 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0x8f7900
i 3 j 14 sizei 8 sizej 16 _out 51
i 3 j 14 sizei 8 sizej 32 _out 51
i 3 j 14 sizei 16 sizej 16 _out 75
i 3 j 14 sizei 16 sizej 32 _out 72
i 3 j 14 sizei 32 sizej 16 _out 75
i 3 j 14 sizei 32 sizej 32 _out 171
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 145, check correct
Current pList size 145, grow
Current pList size 21315, eliminate equvalents
Time out for bottem up search
Current node size 6 Split to two: left size 3 right size 3
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 20, check correct
SynProg: (sizei < sizej)
SynProg: (sizei < sizej)
Complete, program found (sizei < sizej)

Start search node 0x8f16a0
i 3 j 14 sizei 8 sizej 16 _out 51
i 3 j 14 sizei 8 sizej 32 _out 51
i 3 j 14 sizei 16 sizej 32 _out 72
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 145, check correct
Current pList size 145, grow
Current pList size 21315, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 2 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 18, check correct
SynProg: (j < sizei)
SynProg: (j < sizei)
Complete, program found (j < sizei)

Start search node 0x8f3060
i 3 j 14 sizei 8 sizej 16 _out 51
i 3 j 14 sizei 8 sizej 32 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 114, check correct
Current pList size 114, grow
Current pList size 13224, eliminate equvalents
Current pList size 4452, check correct
SynProg: (i + (sizei * 6))
SynProg: (i + (sizei * 6))
Complete, program found (i + (sizei * 6))

Start search node 0x8f1b00
i 3 j 14 sizei 16 sizej 32 _out 72
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 108, check correct
SynProg: (6 * 12)
SynProg: (6 * 12)
Complete, program found (6 * 12)

Start search node 0x8f1830
i 3 j 14 sizei 16 sizej 16 _out 75
i 3 j 14 sizei 32 sizej 16 _out 75
i 3 j 14 sizei 32 sizej 32 _out 171
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 145, check correct
Current pList size 145, grow
Current pList size 21315, eliminate equvalents
Time out for bottem up search
Current node size 3 Split to two: left size 2 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 17, check correct
Current pList size 17, grow
Current pList size 325, eliminate equvalents
Current pList size 77, check correct
SynProg: (sizej < (i + j))
SynProg: (sizej < (i + j))
Complete, program found (sizej < (i + j))

Start search node 0x8f19c0
i 3 j 14 sizei 16 sizej 16 _out 75
i 3 j 14 sizei 32 sizej 16 _out 75
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 123, check correct
Current pList size 123, grow
Current pList size 15375, eliminate equvalents
Current pList size 5096, check correct
SynProg: (i + (6 * 12))
SynProg: (i + (6 * 12))
Complete, program found (i + (6 * 12))

Start search node 0x8f5780
i 3 j 14 sizei 32 sizej 32 _out 171
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 105, check correct
Current pList size 105, grow
Current pList size 11235, eliminate equvalents
Current pList size 2231, check correct
SynProg: (i + (j * 12))
SynProg: (i + (j * 12))
Complete, program found (i + (j * 12))
--------------------------------------, dump tree after search
i 3 j 14 sizei 8 sizej 8 _out 1
i 3 j 14 sizei 8 sizej 16 _out 0
i 3 j 14 sizei 8 sizej 32 _out 0
i 3 j 14 sizei 16 sizej 8 _out 1
i 3 j 14 sizei 16 sizej 16 _out 0
i 3 j 14 sizei 16 sizej 32 _out 0
i 3 j 14 sizei 32 sizej 8 _out 1
i 3 j 14 sizei 32 sizej 16 _out 0
i 3 j 14 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizej) then -1 else (if (sizei < sizej) then (if (j < sizei) then (i + (sizei * 6)) else (6 * 12)) else (if (sizej < (i + j)) then (i + (6 * 12)) else (i + (j * 12)))))
L---i 3 j 14 sizei 8 sizej 8 _out -1
L---i 3 j 14 sizei 16 sizej 8 _out -1
L---i 3 j 14 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 3 j 14 sizei 8 sizej 16 _out 1
R---i 3 j 14 sizei 8 sizej 32 _out 1
R---i 3 j 14 sizei 16 sizej 16 _out 0
R---i 3 j 14 sizei 16 sizej 32 _out 1
R---i 3 j 14 sizei 32 sizej 16 _out 0
R---i 3 j 14 sizei 32 sizej 32 _out 0
Searched Program: (if (sizei < sizej) then (if (j < sizei) then (i + (sizei * 6)) else (6 * 12)) else (if (sizej < (i + j)) then (i + (6 * 12)) else (i + (j * 12))))
R---L---i 3 j 14 sizei 8 sizej 16 _out 1
R---L---i 3 j 14 sizei 8 sizej 32 _out 1
R---L---i 3 j 14 sizei 16 sizej 32 _out 0
Searched Program: (if (j < sizei) then (i + (sizei * 6)) else (6 * 12))
R---L---L---i 3 j 14 sizei 8 sizej 16 _out 51
R---L---L---i 3 j 14 sizei 8 sizej 32 _out 51
Searched Program: (i + (sizei * 6))
R---L---R---i 3 j 14 sizei 16 sizej 32 _out 72
Searched Program: (6 * 12)
R---R---i 3 j 14 sizei 16 sizej 16 _out 1
R---R---i 3 j 14 sizei 32 sizej 16 _out 1
R---R---i 3 j 14 sizei 32 sizej 32 _out 0
Searched Program: (if (sizej < (i + j)) then (i + (6 * 12)) else (i + (j * 12)))
R---R---L---i 3 j 14 sizei 16 sizej 16 _out 75
R---R---L---i 3 j 14 sizei 32 sizej 16 _out 75
Searched Program: (i + (6 * 12))
R---R---R---i 3 j 14 sizei 32 sizej 32 _out 171
Searched Program: (i + (j * 12))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (j < sizej) then -1 else (if (sizei < sizej) then (if (j < sizei) then (i + (sizei * 6)) else (6 * 12)) else (if (sizej < (i + j)) then (i + (6 * 12)) else (i + (j * 12)))))
--------------------------------------
