Input output examples:
    i 14 j 27 sizei 8 sizej 8    _out -1
    i 14 j 27 sizei 8 sizej 16    _out -1
    i 14 j 27 sizei 8 sizej 32    _out -1
    i 14 j 27 sizei 16 sizej 8    _out -1
    i 14 j 27 sizei 16 sizej 16    _out -1
    i 14 j 27 sizei 16 sizej 32    _out 105
    i 14 j 27 sizei 32 sizej 8    _out -1
    i 14 j 27 sizei 32 sizej 16    _out -1
    i 14 j 27 sizei 32 sizej 32    _out 105
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x23644a0
i 14 j 27 sizei 8 sizej 8 _out -1
i 14 j 27 sizei 8 sizej 16 _out -1
i 14 j 27 sizei 8 sizej 32 _out -1
i 14 j 27 sizei 16 sizej 8 _out -1
i 14 j 27 sizei 16 sizej 16 _out -1
i 14 j 27 sizei 16 sizej 32 _out 105
i 14 j 27 sizei 32 sizej 8 _out -1
i 14 j 27 sizei 32 sizej 16 _out -1
i 14 j 27 sizei 32 sizej 32 _out 105
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 167, check correct
Current pList size 167, grow
Current pList size 28223, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 7 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 26, check correct
Current pList size 26, grow
Current pList size 406, eliminate equvalents
Current pList size 116, check correct
SynProg: ((i < sizei) && (j < sizej))
SynProg: ((i < sizei) && (j < sizej))
Complete, program found ((i < sizei) && (j < sizej))

Start search node 0x23639b0
i 14 j 27 sizei 8 sizej 8 _out -1
i 14 j 27 sizei 8 sizej 16 _out -1
i 14 j 27 sizei 8 sizej 32 _out -1
i 14 j 27 sizei 16 sizej 8 _out -1
i 14 j 27 sizei 16 sizej 16 _out -1
i 14 j 27 sizei 32 sizej 8 _out -1
i 14 j 27 sizei 32 sizej 16 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0x2363cd0
i 14 j 27 sizei 16 sizej 32 _out 105
i 14 j 27 sizei 32 sizej 32 _out 105
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 152, check correct
Current pList size 152, grow
Current pList size 23408, eliminate equvalents
Time out for bottem up search
Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 18, check correct
Current pList size 18, grow
Current pList size 330, eliminate equvalents
Current pList size 73, check correct
SynProg: ((i + j) + (sizej + sizej))
SynProg: ((i + j) + (sizej + sizej))
Complete, program found ((i + j) + (sizej + sizej))

Start search node 0x235fc90
i 14 j 27 sizei 16 sizej 32 _out 105
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 123, check correct
Current pList size 123, grow
Current pList size 15375, eliminate equvalents
Current pList size 3005, check correct
SynProg: (5 + (10 * 10))
SynProg: (5 + (10 * 10))
Complete, program found (5 + (10 * 10))

Start search node 0x235fab0
i 14 j 27 sizei 32 sizej 32 _out 105
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 119, check correct
Current pList size 119, grow
Current pList size 14399, eliminate equvalents
Current pList size 2927, check correct
SynProg: (5 + (10 * 10))
SynProg: (5 + (10 * 10))
Complete, program found (5 + (10 * 10))
--------------------------------------, dump tree after search
i 14 j 27 sizei 8 sizej 8 _out 1
i 14 j 27 sizei 8 sizej 16 _out 1
i 14 j 27 sizei 8 sizej 32 _out 1
i 14 j 27 sizei 16 sizej 8 _out 1
i 14 j 27 sizei 16 sizej 16 _out 1
i 14 j 27 sizei 16 sizej 32 _out 0
i 14 j 27 sizei 32 sizej 8 _out 1
i 14 j 27 sizei 32 sizej 16 _out 1
i 14 j 27 sizei 32 sizej 32 _out 0
Searched Program: (if ((i < sizei) && (j < sizej)) then -1 else (if ((i + j) + (sizej + sizej)) then (5 + (10 * 10)) else (5 + (10 * 10))))
L---i 14 j 27 sizei 8 sizej 8 _out -1
L---i 14 j 27 sizei 8 sizej 16 _out -1
L---i 14 j 27 sizei 8 sizej 32 _out -1
L---i 14 j 27 sizei 16 sizej 8 _out -1
L---i 14 j 27 sizei 16 sizej 16 _out -1
L---i 14 j 27 sizei 32 sizej 8 _out -1
L---i 14 j 27 sizei 32 sizej 16 _out -1
Searched Program: -1
R---i 14 j 27 sizei 16 sizej 32 _out 105
R---i 14 j 27 sizei 32 sizej 32 _out 105
Searched Program: (if ((i + j) + (sizej + sizej)) then (5 + (10 * 10)) else (5 + (10 * 10)))
R---L---i 14 j 27 sizei 16 sizej 32 _out 105
Searched Program: (5 + (10 * 10))
R---R---i 14 j 27 sizei 32 sizej 32 _out 105
Searched Program: (5 + (10 * 10))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if ((i < sizei) && (j < sizej)) then -1 else (if ((i + j) + (sizej + sizej)) then (5 + (10 * 10)) else (5 + (10 * 10))))
--------------------------------------
