Input output examples:
    i 6 j 6 sizei 8 sizej 8    _out 14
    i 6 j 6 sizei 8 sizej 16    _out 6
    i 6 j 6 sizei 8 sizej 32    _out 39
    i 6 j 6 sizei 16 sizej 8    _out 14
    i 6 j 6 sizei 16 sizej 16    _out 62
    i 6 j 6 sizei 16 sizej 32    _out 46
    i 6 j 6 sizei 32 sizej 8    _out 14
    i 6 j 6 sizei 32 sizej 16    _out 62
    i 6 j 6 sizei 32 sizej 32    _out 158
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x13594a0
i 6 j 6 sizei 8 sizej 8 _out 14
i 6 j 6 sizei 8 sizej 16 _out 6
i 6 j 6 sizei 8 sizej 32 _out 39
i 6 j 6 sizei 16 sizej 8 _out 14
i 6 j 6 sizei 16 sizej 16 _out 62
i 6 j 6 sizei 16 sizej 32 _out 46
i 6 j 6 sizei 32 sizej 8 _out 14
i 6 j 6 sizei 32 sizej 16 _out 62
i 6 j 6 sizei 32 sizej 32 _out 158
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
Current pList size 7864, grow
Time out for bottem up search
Current node size 9 Split to two: left size 4 right size 5
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 13, check correct
Current pList size 13, grow
Current pList size 150, eliminate equvalents
Current pList size 46, check correct
Current pList size 46, grow
Current pList size 1876, eliminate equvalents
Current pList size 207, check correct
Current pList size 207, grow
Current pList size 41580, eliminate equvalents
Current pList size 1099, check correct
SynProg: (((i + i) < sizej) && (((i + i) + (i + i)) < (sizei + sizej)))
SynProg: (((i + i) < sizej) && (((i + i) + (i + i)) < (sizei + sizej)))
Complete, program found (((i + i) < sizej) && (((i + i) + (i + i)) < (sizei + sizej)))

Start search node 0x1358fa0
i 6 j 6 sizei 8 sizej 8 _out 14
i 6 j 6 sizei 8 sizej 16 _out 6
i 6 j 6 sizei 16 sizej 8 _out 14
i 6 j 6 sizei 32 sizej 8 _out 14
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7862, check correct
SynProg: ((10 + 12) + (sizej * -1))
SynProg: ((10 + 12) + (sizej * -1))
Complete, program found ((10 + 12) + (sizej * -1))

Start search node 0x135a7f0
i 6 j 6 sizei 8 sizej 32 _out 39
i 6 j 6 sizei 16 sizej 16 _out 62
i 6 j 6 sizei 16 sizej 32 _out 46
i 6 j 6 sizei 32 sizej 16 _out 62
i 6 j 6 sizei 32 sizej 32 _out 158
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
Current pList size 7864, grow
Time out for bottem up search
Current node size 5 Split to two: left size 2 right size 3
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 13, check correct
SynProg: (sizei < sizej)
SynProg: (sizei < sizej)
Complete, program found (sizei < sizej)

Start search node 0x1354e70
i 6 j 6 sizei 8 sizej 32 _out 39
i 6 j 6 sizei 16 sizej 32 _out 46
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 123, check correct
Current pList size 123, grow
Current pList size 15375, eliminate equvalents
Current pList size 5557, check correct
Current pList size 5557, grow
Time out for bottem up search
Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 11, check correct
Current pList size 11, grow
Current pList size 141, eliminate equvalents
Current pList size 38, check correct
SynProg: (sizei < (i + i))
SynProg: (sizei < (i + i))
Complete, program found (sizei < (i + i))

Start search node 0x1354e20
i 6 j 6 sizei 8 sizej 32 _out 39
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
SynProg: (sizej + 7)
SynProg: (sizej + 7)
Complete, program found (sizej + 7)

Start search node 0x1354d80
i 6 j 6 sizei 16 sizej 32 _out 46
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
Current pList size 99, grow
Current pList size 9999, eliminate equvalents
Current pList size 2045, check correct
SynProg: (i + (sizej + 8))
SynProg: (i + (sizej + 8))
Complete, program found (i + (sizej + 8))

Start search node 0x13543d0
i 6 j 6 sizei 16 sizej 16 _out 62
i 6 j 6 sizei 32 sizej 16 _out 62
i 6 j 6 sizei 32 sizej 32 _out 158
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
Current pList size 7864, grow
Time out for bottem up search
Current node size 3 Split to two: left size 2 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 12, check correct
Current pList size 12, grow
Current pList size 145, eliminate equvalents
Current pList size 38, check correct
Current pList size 38, grow
Current pList size 1800, eliminate equvalents
Current pList size 172, check correct
SynProg: (sizej < (i + (i + i)))
SynProg: (sizej < (i + (i + i)))
Complete, program found (sizej < (i + (i + i)))

Start search node 0x1359270
i 6 j 6 sizei 16 sizej 16 _out 62
i 6 j 6 sizei 32 sizej 16 _out 62
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 113, check correct
Current pList size 113, grow
Current pList size 12995, eliminate equvalents
Current pList size 4431, check correct
SynProg: (i + (7 * 8))
SynProg: (i + (7 * 8))
Complete, program found (i + (7 * 8))

Start search node 0x1354ce0
i 6 j 6 sizei 32 sizej 32 _out 158
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
Current pList size 94, grow
Current pList size 9024, eliminate equvalents
Current pList size 1935, check correct
SynProg: ((i + sizei) + (10 * 12))
SynProg: ((i + sizei) + (10 * 12))
Complete, program found ((i + sizei) + (10 * 12))
--------------------------------------, dump tree after search
i 6 j 6 sizei 8 sizej 8 _out 1
i 6 j 6 sizei 8 sizej 16 _out 1
i 6 j 6 sizei 8 sizej 32 _out 0
i 6 j 6 sizei 16 sizej 8 _out 1
i 6 j 6 sizei 16 sizej 16 _out 0
i 6 j 6 sizei 16 sizej 32 _out 0
i 6 j 6 sizei 32 sizej 8 _out 1
i 6 j 6 sizei 32 sizej 16 _out 0
i 6 j 6 sizei 32 sizej 32 _out 0
Searched Program: (if (((i + i) < sizej) && (((i + i) + (i + i)) < (sizei + sizej))) then ((10 + 12) + (sizej * -1)) else (if (sizei < sizej) then (if (sizei < (i + i)) then (sizej + 7) else (i + (sizej + 8))) else (if (sizej < (i + (i + i))) then (i + (7 * 8)) else ((i + sizei) + (10 * 12)))))
L---i 6 j 6 sizei 8 sizej 8 _out 14
L---i 6 j 6 sizei 8 sizej 16 _out 6
L---i 6 j 6 sizei 16 sizej 8 _out 14
L---i 6 j 6 sizei 32 sizej 8 _out 14
Searched Program: ((10 + 12) + (sizej * -1))
R---i 6 j 6 sizei 8 sizej 32 _out 1
R---i 6 j 6 sizei 16 sizej 16 _out 0
R---i 6 j 6 sizei 16 sizej 32 _out 1
R---i 6 j 6 sizei 32 sizej 16 _out 0
R---i 6 j 6 sizei 32 sizej 32 _out 0
Searched Program: (if (sizei < sizej) then (if (sizei < (i + i)) then (sizej + 7) else (i + (sizej + 8))) else (if (sizej < (i + (i + i))) then (i + (7 * 8)) else ((i + sizei) + (10 * 12))))
R---L---i 6 j 6 sizei 8 sizej 32 _out 1
R---L---i 6 j 6 sizei 16 sizej 32 _out 0
Searched Program: (if (sizei < (i + i)) then (sizej + 7) else (i + (sizej + 8)))
R---L---L---i 6 j 6 sizei 8 sizej 32 _out 39
Searched Program: (sizej + 7)
R---L---R---i 6 j 6 sizei 16 sizej 32 _out 46
Searched Program: (i + (sizej + 8))
R---R---i 6 j 6 sizei 16 sizej 16 _out 1
R---R---i 6 j 6 sizei 32 sizej 16 _out 1
R---R---i 6 j 6 sizei 32 sizej 32 _out 0
Searched Program: (if (sizej < (i + (i + i))) then (i + (7 * 8)) else ((i + sizei) + (10 * 12)))
R---R---L---i 6 j 6 sizei 16 sizej 16 _out 62
R---R---L---i 6 j 6 sizei 32 sizej 16 _out 62
Searched Program: (i + (7 * 8))
R---R---R---i 6 j 6 sizei 32 sizej 32 _out 158
Searched Program: ((i + sizei) + (10 * 12))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (((i + i) < sizej) && (((i + i) + (i + i)) < (sizei + sizej))) then ((10 + 12) + (sizej * -1)) else (if (sizei < sizej) then (if (sizei < (i + i)) then (sizej + 7) else (i + (sizej + 8))) else (if (sizej < (i + (i + i))) then (i + (7 * 8)) else ((i + sizei) + (10 * 12)))))
--------------------------------------
