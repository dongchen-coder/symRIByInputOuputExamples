Input output examples:
    i 4 j 10 sizei 8 sizej 8    _out -1
    i 4 j 10 sizei 8 sizej 16    _out 69
    i 4 j 10 sizei 8 sizej 32    _out 46
    i 4 j 10 sizei 16 sizej 8    _out -1
    i 4 j 10 sizei 16 sizej 16    _out 69
    i 4 j 10 sizei 16 sizej 32    _out 53
    i 4 j 10 sizei 32 sizej 8    _out -1
    i 4 j 10 sizei 32 sizej 16    _out 69
    i 4 j 10 sizei 32 sizej 32    _out 165
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 2 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0xcb94a0
i 4 j 10 sizei 8 sizej 8 _out -1
i 4 j 10 sizei 8 sizej 16 _out 69
i 4 j 10 sizei 8 sizej 32 _out 46
i 4 j 10 sizei 16 sizej 8 _out -1
i 4 j 10 sizei 16 sizej 16 _out 69
i 4 j 10 sizei 16 sizej 32 _out 53
i 4 j 10 sizei 32 sizej 8 _out -1
i 4 j 10 sizei 32 sizej 16 _out 69
i 4 j 10 sizei 32 sizej 32 _out 165
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
Current pList size 7864, grow
Time out for bottem up search
Failed, try to split node: Current node size 9 Split to two: left size 3 right size 6
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 27, check correct
SynProg: (j < sizej)
SynProg: (j < sizej)
Start search condition, Complete, program found (j < sizej)
succeed

Start search node 0xcb93b0
i 4 j 10 sizei 8 sizej 8 _out -1
i 4 j 10 sizei 16 sizej 8 _out -1
i 4 j 10 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0xcba900
i 4 j 10 sizei 8 sizej 16 _out 69
i 4 j 10 sizei 8 sizej 32 _out 46
i 4 j 10 sizei 16 sizej 16 _out 69
i 4 j 10 sizei 16 sizej 32 _out 53
i 4 j 10 sizei 32 sizej 16 _out 69
i 4 j 10 sizei 32 sizej 32 _out 165
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
Current pList size 7864, grow
Time out for bottem up search
Failed, try to split node: Current node size 6 Split to two: left size 5 right size 1
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 25, check correct
Current pList size 25, grow
Current pList size 598, eliminate equvalents
Current pList size 110, check correct
Current pList size 110, grow
Current pList size 13548, eliminate equvalents
Current pList size 604, check correct
SynProg: ((! (sizei < sizej) ) && ((j + j) < sizej))
SynProg: ((! (sizei < sizej) ) && ((j + j) < sizej))
Start search condition, Complete, program found ((! (sizei < sizej) ) && ((j + j) < sizej))
succeed

Start search node 0xcb8910
i 4 j 10 sizei 8 sizej 16 _out 69
i 4 j 10 sizei 8 sizej 32 _out 46
i 4 j 10 sizei 16 sizej 16 _out 69
i 4 j 10 sizei 16 sizej 32 _out 53
i 4 j 10 sizei 32 sizej 16 _out 69
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Current pList size 7864, check correct
Current pList size 7864, grow
Time out for bottem up search
Failed, try to split node: Current node size 5 Split to two: left size 2 right size 3
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 25, check correct
Current pList size 25, grow
Current pList size 598, eliminate equvalents
Current pList size 106, check correct
SynProg: (sizej < (j + j))
SynProg: (sizej < (j + j))
Start search condition, Complete, program found (sizej < (j + j))
succeed

Start search node 0xcb4ec0
i 4 j 10 sizei 8 sizej 32 _out 46
i 4 j 10 sizei 16 sizej 32 _out 53
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 123, check correct
Current pList size 123, grow
Current pList size 15375, eliminate equvalents
Current pList size 5557, check correct
Current pList size 5557, grow
Time out for bottem up search
Failed, try to split node: Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 23, check correct
SynProg: (j < sizei)
SynProg: (j < sizei)
Start search condition, Complete, program found (j < sizei)
succeed

Start search node 0xcb4330
i 4 j 10 sizei 8 sizej 32 _out 46
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
Current pList size 94, grow
Current pList size 9024, eliminate equvalents
Current pList size 1935, check correct
SynProg: (i + (j + sizej))
SynProg: (i + (j + sizej))
Complete, program found (i + (j + sizej))

Start search node 0xcb92c0
i 4 j 10 sizei 16 sizej 32 _out 53
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
Current pList size 99, grow
Current pList size 9999, eliminate equvalents
Current pList size 2045, check correct
SynProg: (i + (7 * 7))
SynProg: (i + (7 * 7))
Complete, program found (i + (7 * 7))

Start search node 0xcbb900
i 4 j 10 sizei 8 sizej 16 _out 69
i 4 j 10 sizei 16 sizej 16 _out 69
i 4 j 10 sizei 32 sizej 16 _out 69
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 113, check correct
Current pList size 113, grow
Current pList size 12995, eliminate equvalents
Current pList size 4431, check correct
SynProg: (3 + (6 * 11))
SynProg: (3 + (6 * 11))
Complete, program found (3 + (6 * 11))

Start search node 0xcb4b50
i 4 j 10 sizei 32 sizej 32 _out 165
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
Current pList size 94, grow
Current pList size 9024, eliminate equvalents
Current pList size 1935, check correct
SynProg: (5 + (sizei * 5))
SynProg: (5 + (sizei * 5))
Complete, program found (5 + (sizei * 5))
--------------------------------------, dump tree after search
i 4 j 10 sizei 8 sizej 8 _out 1
i 4 j 10 sizei 8 sizej 16 _out 0
i 4 j 10 sizei 8 sizej 32 _out 0
i 4 j 10 sizei 16 sizej 8 _out 1
i 4 j 10 sizei 16 sizej 16 _out 0
i 4 j 10 sizei 16 sizej 32 _out 0
i 4 j 10 sizei 32 sizej 8 _out 1
i 4 j 10 sizei 32 sizej 16 _out 0
i 4 j 10 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizej) then -1 else (if ((! (sizei < sizej) ) && ((j + j) < sizej)) then (if (sizej < (j + j)) then (if (j < sizei) then (i + (j + sizej)) else (i + (7 * 7))) else (3 + (6 * 11))) else (5 + (sizei * 5))))
L---i 4 j 10 sizei 8 sizej 8 _out -1
L---i 4 j 10 sizei 16 sizej 8 _out -1
L---i 4 j 10 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 4 j 10 sizei 8 sizej 16 _out 1
R---i 4 j 10 sizei 8 sizej 32 _out 1
R---i 4 j 10 sizei 16 sizej 16 _out 1
R---i 4 j 10 sizei 16 sizej 32 _out 1
R---i 4 j 10 sizei 32 sizej 16 _out 1
R---i 4 j 10 sizei 32 sizej 32 _out 0
Searched Program: (if ((! (sizei < sizej) ) && ((j + j) < sizej)) then (if (sizej < (j + j)) then (if (j < sizei) then (i + (j + sizej)) else (i + (7 * 7))) else (3 + (6 * 11))) else (5 + (sizei * 5)))
R---L---i 4 j 10 sizei 8 sizej 16 _out 0
R---L---i 4 j 10 sizei 8 sizej 32 _out 1
R---L---i 4 j 10 sizei 16 sizej 16 _out 0
R---L---i 4 j 10 sizei 16 sizej 32 _out 1
R---L---i 4 j 10 sizei 32 sizej 16 _out 0
Searched Program: (if (sizej < (j + j)) then (if (j < sizei) then (i + (j + sizej)) else (i + (7 * 7))) else (3 + (6 * 11)))
R---L---L---i 4 j 10 sizei 8 sizej 32 _out 1
R---L---L---i 4 j 10 sizei 16 sizej 32 _out 0
Searched Program: (if (j < sizei) then (i + (j + sizej)) else (i + (7 * 7)))
R---L---L---L---i 4 j 10 sizei 8 sizej 32 _out 46
Searched Program: (i + (j + sizej))
R---L---L---R---i 4 j 10 sizei 16 sizej 32 _out 53
Searched Program: (i + (7 * 7))
R---L---R---i 4 j 10 sizei 8 sizej 16 _out 69
R---L---R---i 4 j 10 sizei 16 sizej 16 _out 69
R---L---R---i 4 j 10 sizei 32 sizej 16 _out 69
Searched Program: (3 + (6 * 11))
R---R---i 4 j 10 sizei 32 sizej 32 _out 165
Searched Program: (5 + (sizei * 5))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (j < sizej) then -1 else (if ((! (sizei < sizej) ) && ((j + j) < sizej)) then (if (sizej < (j + j)) then (if (j < sizei) then (i + (j + sizej)) else (i + (7 * 7))) else (3 + (6 * 11))) else (5 + (sizei * 5))))
--------------------------------------
