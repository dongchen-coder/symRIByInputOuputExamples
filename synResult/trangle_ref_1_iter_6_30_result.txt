Input output examples:
    i 6 j 30 sizei 8 sizej 8    _out -1
    i 6 j 30 sizei 8 sizej 16    _out -1
    i 6 j 30 sizei 8 sizej 32    _out 51
    i 6 j 30 sizei 16 sizej 8    _out -1
    i 6 j 30 sizei 16 sizej 16    _out -1
    i 6 j 30 sizei 16 sizej 32    _out 99
    i 6 j 30 sizei 32 sizej 8    _out -1
    i 6 j 30 sizei 32 sizej 16    _out -1
    i 6 j 30 sizei 32 sizej 32    _out 153
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 4
        intOps: VAR NUM PLUS ITE 
        boolOps: F AND NOT LT 
        constants: 5 -1 
        vars: i j sizei sizej 
--------------------------------------, search start
Init pList size 6, check correct
Current pList size 6, grow
Current pList size 79, eliminate equvalents
Current pList size 79, check correct
Current pList size 79, grow
Current pList size 70282, eliminate equvalents
Time out for bottem up search
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 37, eliminate equvalents
Current pList size 37, check correct
SynProg: (j < sizej)
SynProg: (j < sizej)
Complete, program found (j < sizej)
Init pList size 6, check correct
SynProg: -1
SynProg: -1
Complete, program found -1
Init pList size 6, check correct
Current pList size 6, grow
Current pList size 79, eliminate equvalents
Current pList size 79, check correct
Current pList size 79, grow
Current pList size 70282, eliminate equvalents
Time out for bottem up search
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 37, eliminate equvalents
Current pList size 37, check correct
Current pList size 37, grow
Current pList size 1144, eliminate equvalents
Current pList size 1144, check correct
SynProg: (j < (sizei + sizei))
SynProg: (j < (sizei + sizei))
Complete, program found (j < (sizei + sizei))
Init pList size 6, check correct
Current pList size 6, grow
Current pList size 79, eliminate equvalents
Current pList size 79, check correct
Current pList size 79, grow
Current pList size 70282, eliminate equvalents
Time out for bottem up search
Split current node, failed
Init pList size 6, check correct
Current pList size 6, grow
Current pList size 79, eliminate equvalents
Current pList size 79, check correct
Current pList size 79, grow
Current pList size 70282, eliminate equvalents
Time out for bottem up search
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 37, eliminate equvalents
Current pList size 37, check correct
SynProg: (j < sizei)
SynProg: (j < sizei)
Complete, program found (j < sizei)
Init pList size 6, check correct
Current pList size 6, grow
Current pList size 79, eliminate equvalents
Current pList size 79, check correct
Current pList size 79, grow
Current pList size 70282, eliminate equvalents
Time out for bottem up search
Split current node, failed
Init pList size 6, check correct
Current pList size 6, grow
Current pList size 79, eliminate equvalents
Current pList size 79, check correct
Current pList size 79, grow
Current pList size 70282, eliminate equvalents
Time out for bottem up search
Split current node, failed
i 6 j 30 sizei 8 sizej 8 _out 1
i 6 j 30 sizei 8 sizej 16 _out 1
i 6 j 30 sizei 8 sizej 32 _out 0
i 6 j 30 sizei 16 sizej 8 _out 1
i 6 j 30 sizei 16 sizej 16 _out 1
i 6 j 30 sizei 16 sizej 32 _out 0
i 6 j 30 sizei 32 sizej 8 _out 1
i 6 j 30 sizei 32 sizej 16 _out 1
i 6 j 30 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizej) then -1 else (if (j < (sizei + sizei)) then  else (if (j < sizei) then  else )))
L---i 6 j 30 sizei 8 sizej 8 _out -1
L---i 6 j 30 sizei 8 sizej 16 _out -1
L---i 6 j 30 sizei 16 sizej 8 _out -1
L---i 6 j 30 sizei 16 sizej 16 _out -1
L---i 6 j 30 sizei 32 sizej 8 _out -1
L---i 6 j 30 sizei 32 sizej 16 _out -1
Searched Program: -1
R---i 6 j 30 sizei 8 sizej 32 _out 1
R---i 6 j 30 sizei 16 sizej 32 _out 0
R---i 6 j 30 sizei 32 sizej 32 _out 0
Searched Program: (if (j < (sizei + sizei)) then  else (if (j < sizei) then  else ))
R---L---i 6 j 30 sizei 8 sizej 32 _out 51
Searched Program: 
R---R---i 6 j 30 sizei 16 sizej 32 _out 1
R---R---i 6 j 30 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizei) then  else )
R---R---L---i 6 j 30 sizei 16 sizej 32 _out 99
Searched Program: 
R---R---R---i 6 j 30 sizei 32 sizej 32 _out 153
Searched Program: 
--------------------------------------, dump search result start
Searched Program (^0^) : (if (j < sizej) then -1 else (if (j < (sizei + sizei)) then  else (if (j < sizei) then  else )))
--------------------------------------
