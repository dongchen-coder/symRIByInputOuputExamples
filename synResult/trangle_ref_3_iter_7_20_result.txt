Input output examples:
    i 7 j 20 sizei 8 sizej 8    _out -1
    i 7 j 20 sizei 8 sizej 16    _out -1
    i 7 j 20 sizei 8 sizej 32    _out 55
    i 7 j 20 sizei 16 sizej 8    _out -1
    i 7 j 20 sizei 16 sizej 16    _out -1
    i 7 j 20 sizei 16 sizej 32    _out 151
    i 7 j 20 sizei 32 sizej 8    _out -1
    i 7 j 20 sizei 32 sizej 16    _out -1
    i 7 j 20 sizei 32 sizej 32    _out 151
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 2 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x1efd4a0
i 7 j 20 sizei 8 sizej 8 _out -1
i 7 j 20 sizei 8 sizej 16 _out -1
i 7 j 20 sizei 8 sizej 32 _out 55
i 7 j 20 sizei 16 sizej 8 _out -1
i 7 j 20 sizei 16 sizej 16 _out -1
i 7 j 20 sizei 16 sizej 32 _out 151
i 7 j 20 sizei 32 sizej 8 _out -1
i 7 j 20 sizei 32 sizej 16 _out -1
i 7 j 20 sizei 32 sizej 32 _out 151
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 147, check correct
Current pList size 147, grow
Current pList size 21903, eliminate equvalents
Time out for bottem up search
Failed, try to split node: Current node size 9 Split to two: left size 6 right size 3
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 28, check correct
SynProg: (j < sizej)
SynProg: (j < sizej)
Start search condition, Complete, program found (j < sizej)
succeed

Start search node 0x1efcdc0
i 7 j 20 sizei 8 sizej 8 _out -1
i 7 j 20 sizei 8 sizej 16 _out -1
i 7 j 20 sizei 16 sizej 8 _out -1
i 7 j 20 sizei 16 sizej 16 _out -1
i 7 j 20 sizei 32 sizej 8 _out -1
i 7 j 20 sizei 32 sizej 16 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0x1efd090
i 7 j 20 sizei 8 sizej 32 _out 55
i 7 j 20 sizei 16 sizej 32 _out 151
i 7 j 20 sizei 32 sizej 32 _out 151
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 136, check correct
Current pList size 136, grow
Current pList size 18768, eliminate equvalents
Time out for bottem up search
Failed, try to split node: Current node size 3 Split to two: left size 1 right size 2
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 24, check correct
Current pList size 24, grow
Current pList size 645, eliminate equvalents
Current pList size 125, check correct
SynProg: (j < (i + sizei))
SynProg: (j < (i + sizei))
Start search condition, Complete, program found (j < (i + sizei))
succeed

Start search node 0x1ef8790
i 7 j 20 sizei 8 sizej 32 _out 55
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 105, check correct
SynProg: (5 * 11)
SynProg: (5 * 11)
Complete, program found (5 * 11)

Start search node 0x1efa090
i 7 j 20 sizei 16 sizej 32 _out 151
i 7 j 20 sizei 32 sizej 32 _out 151
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 136, check correct
Current pList size 136, grow
Current pList size 18768, eliminate equvalents
Time out for bottem up search
Failed, try to split node: Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Start search condition, Init pList size 5, check correct
Current pList size 5, grow
Current pList size 46, eliminate equvalents
Current pList size 24, check correct
Current pList size 24, grow
Current pList size 645, eliminate equvalents
Current pList size 123, check correct
Current pList size 123, grow
Current pList size 21435, eliminate equvalents
Current pList size 741, check correct
SynProg: ((i + (j + j)) + ((j + j) + (sizej + sizej)))
SynProg: ((i + (j + j)) + ((j + j) + (sizej + sizej)))
Start search condition, Complete, program found ((i + (j + j)) + ((j + j) + (sizej + sizej)))
succeed

Start search node 0x1ef8b50
i 7 j 20 sizei 16 sizej 32 _out 151
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 109, check correct
Current pList size 109, grow
Current pList size 12099, eliminate equvalents
Current pList size 2399, check correct
SynProg: (i + (sizei * 9))
SynProg: (i + (sizei * 9))
Complete, program found (i + (sizei * 9))

Start search node 0x1ef8a10
i 7 j 20 sizei 32 sizej 32 _out 151
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 105, check correct
Current pList size 105, grow
Current pList size 11235, eliminate equvalents
Current pList size 2320, check correct
SynProg: (i + (12 * 12))
SynProg: (i + (12 * 12))
Complete, program found (i + (12 * 12))
--------------------------------------, dump tree after search
i 7 j 20 sizei 8 sizej 8 _out 1
i 7 j 20 sizei 8 sizej 16 _out 1
i 7 j 20 sizei 8 sizej 32 _out 0
i 7 j 20 sizei 16 sizej 8 _out 1
i 7 j 20 sizei 16 sizej 16 _out 1
i 7 j 20 sizei 16 sizej 32 _out 0
i 7 j 20 sizei 32 sizej 8 _out 1
i 7 j 20 sizei 32 sizej 16 _out 1
i 7 j 20 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizej) then -1 else (if (j < (i + sizei)) then (5 * 11) else (if ((i + (j + j)) + ((j + j) + (sizej + sizej))) then (i + (sizei * 9)) else (i + (12 * 12)))))
L---i 7 j 20 sizei 8 sizej 8 _out -1
L---i 7 j 20 sizei 8 sizej 16 _out -1
L---i 7 j 20 sizei 16 sizej 8 _out -1
L---i 7 j 20 sizei 16 sizej 16 _out -1
L---i 7 j 20 sizei 32 sizej 8 _out -1
L---i 7 j 20 sizei 32 sizej 16 _out -1
Searched Program: -1
R---i 7 j 20 sizei 8 sizej 32 _out 1
R---i 7 j 20 sizei 16 sizej 32 _out 0
R---i 7 j 20 sizei 32 sizej 32 _out 0
Searched Program: (if (j < (i + sizei)) then (5 * 11) else (if ((i + (j + j)) + ((j + j) + (sizej + sizej))) then (i + (sizei * 9)) else (i + (12 * 12))))
R---L---i 7 j 20 sizei 8 sizej 32 _out 55
Searched Program: (5 * 11)
R---R---i 7 j 20 sizei 16 sizej 32 _out 151
R---R---i 7 j 20 sizei 32 sizej 32 _out 151
Searched Program: (if ((i + (j + j)) + ((j + j) + (sizej + sizej))) then (i + (sizei * 9)) else (i + (12 * 12)))
R---R---L---i 7 j 20 sizei 16 sizej 32 _out 151
Searched Program: (i + (sizei * 9))
R---R---R---i 7 j 20 sizei 32 sizej 32 _out 151
Searched Program: (i + (12 * 12))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (j < sizej) then -1 else (if (j < (i + sizei)) then (5 * 11) else (if ((i + (j + j)) + ((j + j) + (sizej + sizej))) then (i + (sizei * 9)) else (i + (12 * 12)))))
--------------------------------------
