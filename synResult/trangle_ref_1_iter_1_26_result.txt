Input output examples:
    i 1 j 26 sizei 8 sizej 8    _out -1
    i 1 j 26 sizei 8 sizej 16    _out -1
    i 1 j 26 sizei 8 sizej 32    _out 51
    i 1 j 26 sizei 16 sizej 8    _out -1
    i 1 j 26 sizei 16 sizej 16    _out -1
    i 1 j 26 sizei 16 sizej 32    _out 99
    i 1 j 26 sizei 32 sizej 8    _out -1
    i 1 j 26 sizei 32 sizej 16    _out -1
    i 1 j 26 sizei 32 sizej 32    _out 0
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x12334a0
i 1 j 26 sizei 8 sizej 8 _out -1
i 1 j 26 sizei 8 sizej 16 _out -1
i 1 j 26 sizei 8 sizej 32 _out 51
i 1 j 26 sizei 16 sizej 8 _out -1
i 1 j 26 sizei 16 sizej 16 _out -1
i 1 j 26 sizei 16 sizej 32 _out 99
i 1 j 26 sizei 32 sizej 8 _out -1
i 1 j 26 sizei 32 sizej 16 _out -1
i 1 j 26 sizei 32 sizej 32 _out 0
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 155, check correct
Current pList size 155, grow
Current pList size 24335, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 6 right size 3
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 22, check correct
SynProg: (j < sizej)
SynProg: (j < sizej)
Complete, program found (j < sizej)

Start search node 0x1232dc0
i 1 j 26 sizei 8 sizej 8 _out -1
i 1 j 26 sizei 8 sizej 16 _out -1
i 1 j 26 sizei 16 sizej 8 _out -1
i 1 j 26 sizei 16 sizej 16 _out -1
i 1 j 26 sizei 32 sizej 8 _out -1
i 1 j 26 sizei 32 sizej 16 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0x1233090
i 1 j 26 sizei 8 sizej 32 _out 51
i 1 j 26 sizei 16 sizej 32 _out 99
i 1 j 26 sizei 32 sizej 32 _out 0
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 142, check correct
Current pList size 142, grow
Current pList size 20448, eliminate equvalents
Current pList size 7247, check correct
Current pList size 7247, grow
Time out for bottem up search
Current node size 3 Split to two: left size 1 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 18, check correct
SynProg: (j < sizei)
SynProg: (j < sizei)
Complete, program found (j < sizei)

Start search node 0x122e790
i 1 j 26 sizei 32 sizej 32 _out 0
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 111, check correct
SynProg: (i + -1)
SynProg: (i + -1)
Complete, program found (i + -1)

Start search node 0x1230060
i 1 j 26 sizei 8 sizej 32 _out 51
i 1 j 26 sizei 16 sizej 32 _out 99
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 142, check correct
Current pList size 142, grow
Current pList size 20448, eliminate equvalents
Current pList size 7241, check correct
SynProg: (3 + (sizei * 6))
SynProg: (3 + (sizei * 6))
Complete, program found (3 + (sizei * 6))
--------------------------------------, dump tree after search
i 1 j 26 sizei 8 sizej 8 _out 1
i 1 j 26 sizei 8 sizej 16 _out 1
i 1 j 26 sizei 8 sizej 32 _out 0
i 1 j 26 sizei 16 sizej 8 _out 1
i 1 j 26 sizei 16 sizej 16 _out 1
i 1 j 26 sizei 16 sizej 32 _out 0
i 1 j 26 sizei 32 sizej 8 _out 1
i 1 j 26 sizei 32 sizej 16 _out 1
i 1 j 26 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizej) then -1 else (if (j < sizei) then (i + -1) else (3 + (sizei * 6))))
L---i 1 j 26 sizei 8 sizej 8 _out -1
L---i 1 j 26 sizei 8 sizej 16 _out -1
L---i 1 j 26 sizei 16 sizej 8 _out -1
L---i 1 j 26 sizei 16 sizej 16 _out -1
L---i 1 j 26 sizei 32 sizej 8 _out -1
L---i 1 j 26 sizei 32 sizej 16 _out -1
Searched Program: -1
R---i 1 j 26 sizei 8 sizej 32 _out 0
R---i 1 j 26 sizei 16 sizej 32 _out 0
R---i 1 j 26 sizei 32 sizej 32 _out 1
Searched Program: (if (j < sizei) then (i + -1) else (3 + (sizei * 6)))
R---L---i 1 j 26 sizei 32 sizej 32 _out 0
Searched Program: (i + -1)
R---R---i 1 j 26 sizei 8 sizej 32 _out 51
R---R---i 1 j 26 sizei 16 sizej 32 _out 99
Searched Program: (3 + (sizei * 6))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (j < sizej) then -1 else (if (j < sizei) then (i + -1) else (3 + (sizei * 6))))
--------------------------------------
