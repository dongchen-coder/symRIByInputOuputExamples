Input output examples:
    i 3 j 15 sizei 8 sizej 8    _out -1
    i 3 j 15 sizei 8 sizej 16    _out 51
    i 3 j 15 sizei 8 sizej 32    _out 51
    i 3 j 15 sizei 16 sizej 8    _out -1
    i 3 j 15 sizei 16 sizej 16    _out 75
    i 3 j 15 sizei 16 sizej 32    _out 171
    i 3 j 15 sizei 32 sizej 8    _out -1
    i 3 j 15 sizei 32 sizej 16    _out 75
    i 3 j 15 sizei 32 sizej 32    _out 171
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0xa4b4a0
i 3 j 15 sizei 8 sizej 8 _out -1
i 3 j 15 sizei 8 sizej 16 _out 51
i 3 j 15 sizei 8 sizej 32 _out 51
i 3 j 15 sizei 16 sizej 8 _out -1
i 3 j 15 sizei 16 sizej 16 _out 75
i 3 j 15 sizei 16 sizej 32 _out 171
i 3 j 15 sizei 32 sizej 8 _out -1
i 3 j 15 sizei 32 sizej 16 _out 75
i 3 j 15 sizei 32 sizej 32 _out 171
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 145, check correct
Current pList size 145, grow
Current pList size 21315, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 3 right size 6
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 22, check correct
SynProg: (j < sizej)
SynProg: (j < sizej)
Complete, program found (j < sizej)

Start search node 0xa4b3b0
i 3 j 15 sizei 8 sizej 8 _out -1
i 3 j 15 sizei 16 sizej 8 _out -1
i 3 j 15 sizei 32 sizej 8 _out -1
Searched Program: 
Init pList size 17, check correct
SynProg: -1
SynProg: -1
Complete, program found -1

Start search node 0xa4c900
i 3 j 15 sizei 8 sizej 16 _out 51
i 3 j 15 sizei 8 sizej 32 _out 51
i 3 j 15 sizei 16 sizej 16 _out 75
i 3 j 15 sizei 16 sizej 32 _out 171
i 3 j 15 sizei 32 sizej 16 _out 75
i 3 j 15 sizei 32 sizej 32 _out 171
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 145, check correct
Current pList size 145, grow
Current pList size 21315, eliminate equvalents
Time out for bottem up search
Current node size 6 Split to two: left size 4 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 20, check correct
Current pList size 20, grow
Current pList size 343, eliminate equvalents
Current pList size 87, check correct
Current pList size 87, grow
Current pList size 7435, eliminate equvalents
Current pList size 495, check correct
SynProg: ((j < sizei) && ((i + j) < sizej))
SynProg: ((j < sizei) && ((i + j) < sizej))
Complete, program found ((j < sizei) && ((i + j) < sizej))

Start search node 0xa46420
i 3 j 15 sizei 8 sizej 16 _out 51
i 3 j 15 sizei 8 sizej 32 _out 51
i 3 j 15 sizei 16 sizej 16 _out 75
i 3 j 15 sizei 32 sizej 16 _out 75
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 145, check correct
Current pList size 145, grow
Current pList size 21315, eliminate equvalents
Time out for bottem up search
Current node size 4 Split to two: left size 2 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 19, check correct
SynProg: (j < sizei)
SynProg: (j < sizei)
Complete, program found (j < sizei)

Start search node 0xa4af00
i 3 j 15 sizei 8 sizej 16 _out 51
i 3 j 15 sizei 8 sizej 32 _out 51
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 114, check correct
Current pList size 114, grow
Current pList size 13224, eliminate equvalents
Current pList size 4479, check correct
SynProg: (i + (sizei * 6))
SynProg: (i + (sizei * 6))
Complete, program found (i + (sizei * 6))

Start search node 0xa46ce0
i 3 j 15 sizei 16 sizej 16 _out 75
i 3 j 15 sizei 32 sizej 16 _out 75
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 125, check correct
SynProg: (j * 5)
SynProg: (j * 5)
Complete, program found (j * 5)

Start search node 0xa468d0
i 3 j 15 sizei 16 sizej 32 _out 171
i 3 j 15 sizei 32 sizej 32 _out 171
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 136, check correct
Current pList size 136, grow
Current pList size 18768, eliminate equvalents
Current pList size 6648, check correct
SynProg: (6 + (j * 11))
SynProg: (6 + (j * 11))
Complete, program found (6 + (j * 11))
--------------------------------------, dump tree after search
i 3 j 15 sizei 8 sizej 8 _out 1
i 3 j 15 sizei 8 sizej 16 _out 0
i 3 j 15 sizei 8 sizej 32 _out 0
i 3 j 15 sizei 16 sizej 8 _out 1
i 3 j 15 sizei 16 sizej 16 _out 0
i 3 j 15 sizei 16 sizej 32 _out 0
i 3 j 15 sizei 32 sizej 8 _out 1
i 3 j 15 sizei 32 sizej 16 _out 0
i 3 j 15 sizei 32 sizej 32 _out 0
Searched Program: (if (j < sizej) then -1 else (if ((j < sizei) && ((i + j) < sizej)) then (if (j < sizei) then (i + (sizei * 6)) else (j * 5)) else (6 + (j * 11))))
L---i 3 j 15 sizei 8 sizej 8 _out -1
L---i 3 j 15 sizei 16 sizej 8 _out -1
L---i 3 j 15 sizei 32 sizej 8 _out -1
Searched Program: -1
R---i 3 j 15 sizei 8 sizej 16 _out 1
R---i 3 j 15 sizei 8 sizej 32 _out 1
R---i 3 j 15 sizei 16 sizej 16 _out 1
R---i 3 j 15 sizei 16 sizej 32 _out 0
R---i 3 j 15 sizei 32 sizej 16 _out 1
R---i 3 j 15 sizei 32 sizej 32 _out 0
Searched Program: (if ((j < sizei) && ((i + j) < sizej)) then (if (j < sizei) then (i + (sizei * 6)) else (j * 5)) else (6 + (j * 11)))
R---L---i 3 j 15 sizei 8 sizej 16 _out 1
R---L---i 3 j 15 sizei 8 sizej 32 _out 1
R---L---i 3 j 15 sizei 16 sizej 16 _out 0
R---L---i 3 j 15 sizei 32 sizej 16 _out 0
Searched Program: (if (j < sizei) then (i + (sizei * 6)) else (j * 5))
R---L---L---i 3 j 15 sizei 8 sizej 16 _out 51
R---L---L---i 3 j 15 sizei 8 sizej 32 _out 51
Searched Program: (i + (sizei * 6))
R---L---R---i 3 j 15 sizei 16 sizej 16 _out 75
R---L---R---i 3 j 15 sizei 32 sizej 16 _out 75
Searched Program: (j * 5)
R---R---i 3 j 15 sizei 16 sizej 32 _out 171
R---R---i 3 j 15 sizei 32 sizej 32 _out 171
Searched Program: (6 + (j * 11))
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (j < sizej) then -1 else (if ((j < sizei) && ((i + j) < sizej)) then (if (j < sizei) then (i + (sizei * 6)) else (j * 5)) else (6 + (j * 11))))
--------------------------------------
