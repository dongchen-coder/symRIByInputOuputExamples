Input output examples:
    i 7 j 7 sizei 8 sizej 8    _out 0
    i 7 j 7 sizei 8 sizej 16    _out 0
    i 7 j 7 sizei 8 sizej 32    _out 96
    i 7 j 7 sizei 16 sizej 8    _out 0
    i 7 j 7 sizei 16 sizej 16    _out 0
    i 7 j 7 sizei 16 sizej 32    _out 48
    i 7 j 7 sizei 32 sizej 8    _out 0
    i 7 j 7 sizei 32 sizej 16    _out 0
    i 7 j 7 sizei 32 sizej 32    _out 0
Language used in Unification:
    Predicate language:
        program depth bound: 6
        intOps: VAR PLUS 
        boolOps: F AND NOT LT 
        constants: 
        vars: i j sizei sizej 
    Term language:
        program depth bound: 6
        intOps: VAR NUM PLUS TIMES 
        boolOps: 
        constants: 1 2 3 4 5 6 7 8 9 10 11 12 -1 
        vars: i j sizei sizej 
--------------------------------------, search start

Start search node 0x20a64a0
i 7 j 7 sizei 8 sizej 8 _out 0
i 7 j 7 sizei 8 sizej 16 _out 0
i 7 j 7 sizei 8 sizej 32 _out 96
i 7 j 7 sizei 16 sizej 8 _out 0
i 7 j 7 sizei 16 sizej 16 _out 0
i 7 j 7 sizei 16 sizej 32 _out 48
i 7 j 7 sizei 32 sizej 8 _out 0
i 7 j 7 sizei 32 sizej 16 _out 0
i 7 j 7 sizei 32 sizej 32 _out 0
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
Current pList size 132, grow
Current pList size 17688, eliminate equvalents
Time out for bottem up search
Current node size 9 Split to two: left size 7 right size 2
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 13, check correct
Current pList size 13, grow
Current pList size 150, eliminate equvalents
Current pList size 46, check correct
Current pList size 46, grow
Current pList size 1876, eliminate equvalents
Current pList size 208, check correct
SynProg: (sizej < (i + (i + sizei)))
SynProg: (sizej < (i + (i + sizei)))
Complete, program found (sizej < (i + (i + sizei)))

Start search node 0x20a59b0
i 7 j 7 sizei 8 sizej 8 _out 0
i 7 j 7 sizei 8 sizej 16 _out 0
i 7 j 7 sizei 16 sizej 8 _out 0
i 7 j 7 sizei 16 sizej 16 _out 0
i 7 j 7 sizei 32 sizej 8 _out 0
i 7 j 7 sizei 32 sizej 16 _out 0
i 7 j 7 sizei 32 sizej 32 _out 0
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 132, check correct
SynProg: (1 + -1)
SynProg: (1 + -1)
Complete, program found (1 + -1)

Start search node 0x20a5cd0
i 7 j 7 sizei 8 sizej 32 _out 96
i 7 j 7 sizei 16 sizej 32 _out 48
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 123, check correct
Current pList size 123, grow
Current pList size 15375, eliminate equvalents
Time out for bottem up search
Current node size 2 Split to two: left size 1 right size 1
Split current node, succeed
Init pList size 4, check correct
Current pList size 4, grow
Current pList size 31, eliminate equvalents
Current pList size 11, check correct
Current pList size 11, grow
Current pList size 141, eliminate equvalents
Current pList size 38, check correct
SynProg: (sizei < (i + i))
SynProg: (sizei < (i + i))
Complete, program found (sizei < (i + i))

Start search node 0x20a1a60
i 7 j 7 sizei 16 sizej 32 _out 48
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 99, check correct
SynProg: (sizei + sizej)
SynProg: (sizei + sizej)
Complete, program found (sizei + sizej)

Start search node 0x20a19c0
i 7 j 7 sizei 8 sizej 32 _out 96
Searched Program: 
Init pList size 17, check correct
Current pList size 17, grow
Current pList size 323, eliminate equvalents
Current pList size 94, check correct
SynProg: (sizei * 12)
SynProg: (sizei * 12)
Complete, program found (sizei * 12)
--------------------------------------, dump tree after search
i 7 j 7 sizei 8 sizej 8 _out 1
i 7 j 7 sizei 8 sizej 16 _out 1
i 7 j 7 sizei 8 sizej 32 _out 0
i 7 j 7 sizei 16 sizej 8 _out 1
i 7 j 7 sizei 16 sizej 16 _out 1
i 7 j 7 sizei 16 sizej 32 _out 0
i 7 j 7 sizei 32 sizej 8 _out 1
i 7 j 7 sizei 32 sizej 16 _out 1
i 7 j 7 sizei 32 sizej 32 _out 1
Searched Program: (if (sizej < (i + (i + sizei))) then (1 + -1) else (if (sizei < (i + i)) then (sizei + sizej) else (sizei * 12)))
L---i 7 j 7 sizei 8 sizej 8 _out 0
L---i 7 j 7 sizei 8 sizej 16 _out 0
L---i 7 j 7 sizei 16 sizej 8 _out 0
L---i 7 j 7 sizei 16 sizej 16 _out 0
L---i 7 j 7 sizei 32 sizej 8 _out 0
L---i 7 j 7 sizei 32 sizej 16 _out 0
L---i 7 j 7 sizei 32 sizej 32 _out 0
Searched Program: (1 + -1)
R---i 7 j 7 sizei 8 sizej 32 _out 0
R---i 7 j 7 sizei 16 sizej 32 _out 1
Searched Program: (if (sizei < (i + i)) then (sizei + sizej) else (sizei * 12))
R---L---i 7 j 7 sizei 16 sizej 32 _out 48
Searched Program: (sizei + sizej)
R---R---i 7 j 7 sizei 8 sizej 32 _out 96
Searched Program: (sizei * 12)
--------------------------------------
--------------------------------------, dump search result start
Searched Program (^0^) : (if (sizej < (i + (i + sizei))) then (1 + -1) else (if (sizei < (i + i)) then (sizei + sizej) else (sizei * 12)))
--------------------------------------
